/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={16:function(t,e){!function(t){"use strict";function e(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}var n="http://www.w3.org/1999/xhtml",r={svg:"http://www.w3.org/2000/svg",xhtml:n,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function i(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),r.hasOwnProperty(e)?{space:r[e],local:t}:t}function o(t){return function(){var e=this.ownerDocument,r=this.namespaceURI;return r===n&&e.documentElement.namespaceURI===n?e.createElement(t):e.createElementNS(r,t)}}function s(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function a(t){var e=i(t);return(e.local?s:o)(e)}function u(){}function m(t){return null==t?u:function(){return this.querySelector(t)}}function c(){return[]}function l(t){return new Array(t.length)}function h(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}h.prototype={constructor:h,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function d(t,e,n,r,i,o){for(var s,a=0,u=e.length,m=o.length;a<m;++a)(s=e[a])?(s.__data__=o[a],r[a]=s):n[a]=new h(t,o[a]);for(;a<u;++a)(s=e[a])&&(i[a]=s)}function f(t,e,n,r,i,o,s){var a,u,m,c={},l=e.length,d=o.length,f=new Array(l);for(a=0;a<l;++a)(u=e[a])&&(f[a]=m="$"+s.call(u,u.__data__,a,e),m in c?i[a]=u:c[m]=u);for(a=0;a<d;++a)(u=c[m="$"+s.call(t,o[a],a,o)])?(r[a]=u,u.__data__=o[a],c[m]=null):n[a]=new h(t,o[a]);for(a=0;a<l;++a)(u=e[a])&&c[f[a]]===u&&(i[a]=u)}function p(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function P(t){return function(){this.removeAttribute(t)}}function M(t){return function(){this.removeAttributeNS(t.space,t.local)}}function g(t,e){return function(){this.setAttribute(t,e)}}function b(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function y(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function v(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function A(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function w(t){return function(){this.style.removeProperty(t)}}function _(t,e,n){return function(){this.style.setProperty(t,e,n)}}function x(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function j(t,e){return t.style.getPropertyValue(e)||A(t).getComputedStyle(t,null).getPropertyValue(e)}function C(t){return function(){delete this[t]}}function O(t,e){return function(){this[t]=e}}function S(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function T(t){return t.trim().split(/^|\s+/)}function E(t){return t.classList||new N(t)}function N(t){this._node=t,this._names=T(t.getAttribute("class")||"")}function D(t,e){for(var n=E(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function L(t,e){for(var n=E(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function $(t){return function(){D(this,t)}}function G(t){return function(){L(this,t)}}function B(t,e){return function(){(e.apply(this,arguments)?D:L)(this,t)}}function F(){this.textContent=""}function k(t){return function(){this.textContent=t}}function W(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function I(){this.innerHTML=""}function z(t){return function(){this.innerHTML=t}}function R(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function H(){this.nextSibling&&this.parentNode.appendChild(this)}function U(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function q(){return null}function V(){var t=this.parentNode;t&&t.removeChild(this)}function Z(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function X(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}N.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Y={};function J(t,e,n){return t=K(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function K(t,e,n){return function(r){try{t.call(this,this.__data__,e,n)}finally{}}}function Q(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function tt(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function et(t,e,n){var r=Y.hasOwnProperty(t.type)?J:K;return function(i,o,s){var a,u=this.__on,m=r(e,o,s);if(u)for(var c=0,l=u.length;c<l;++c)if((a=u[c]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=m,a.capture=n),void(a.value=e);this.addEventListener(t.type,m,n),a={type:t.type,name:t.name,value:e,listener:m,capture:n},u?u.push(a):this.__on=[a]}}function nt(t,e,n){var r=A(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function rt(t,e){return function(){return nt(this,t,e)}}function it(t,e){return function(){return nt(this,t,e.apply(this,arguments))}}"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Y={mouseenter:"mouseover",mouseleave:"mouseout"}));var ot=[null];function st(t,e){this._groups=t,this._parents=e}function at(t){return t.toLowerCase()}st.prototype=function(){return new st([[document.documentElement]],ot)}.prototype={constructor:st,select:function(t){"function"!=typeof t&&(t=m(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,s,a=e[i],u=a.length,c=r[i]=new Array(u),l=0;l<u;++l)(o=a[l])&&(s=t.call(o,o.__data__,l,a))&&("__data__"in o&&(s.__data__=o.__data__),c[l]=s);return new st(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=function(t){return null==t?c:function(){return this.querySelectorAll(t)}}(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var s,a=e[o],u=a.length,m=0;m<u;++m)(s=a[m])&&(r.push(t.call(s,s.__data__,m,a)),i.push(s));return new st(r,i)},filter:function(t){"function"!=typeof t&&(t=function(t){return function(){return this.matches(t)}}(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,s=e[i],a=s.length,u=r[i]=[],m=0;m<a;++m)(o=s[m])&&t.call(o,o.__data__,m,s)&&u.push(o);return new st(r,this._parents)},data:function(t,e){if(!t)return P=new Array(this.size()),c=-1,this.each((function(t){P[++c]=t})),P;var n,r=e?f:d,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=o.length,a=new Array(s),u=new Array(s),m=new Array(s),c=0;c<s;++c){var l=i[c],h=o[c],p=h.length,P=t.call(l,l&&l.__data__,c,i),M=P.length,g=u[c]=new Array(M),b=a[c]=new Array(M);r(l,h,g,b,m[c]=new Array(p),P,e);for(var y,v,A=0,w=0;A<M;++A)if(y=g[A]){for(A>=w&&(w=A+1);!(v=b[w])&&++w<M;);y._next=v||null}}return(a=new st(a,i))._enter=u,a._exit=m,a},enter:function(){return new st(this._enter||this._groups.map(l),this._parents)},exit:function(){return new st(this._exit||this._groups.map(l),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),s=new Array(r),a=0;a<o;++a)for(var u,m=e[a],c=n[a],l=m.length,h=s[a]=new Array(l),d=0;d<l;++d)(u=m[d]||c[d])&&(h[d]=u);for(;a<r;++a)s[a]=e[a];return new st(s,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,s=i[o];--o>=0;)(r=i[o])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=p);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var s,a=n[o],u=a.length,m=i[o]=new Array(u),c=0;c<u;++c)(s=a[c])&&(m[c]=s);m.sort(e)}return new st(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var s=r[i];if(s)return s}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],s=0,a=o.length;s<a;++s)(i=o[s])&&t.call(i,i.__data__,s,o);return this},attr:function(t,e){var n=i(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?M:P:"function"==typeof e?n.local?v:y:n.local?b:g)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?w:"function"==typeof e?x:_)(t,e,null==n?"":n)):j(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?C:"function"==typeof e?S:O)(t,e)):this.node()[t]},classed:function(t,e){var n=T(t+"");if(arguments.length<2){for(var r=E(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?B:e?$:G)(n,e))},text:function(t){return arguments.length?this.each(null==t?F:("function"==typeof t?W:k)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?I:("function"==typeof t?R:z)(t)):this.node().innerHTML},raise:function(){return this.each(H)},lower:function(){return this.each(U)},append:function(t){var e="function"==typeof t?t:a(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:a(t),r=null==e?q:"function"==typeof e?e:m(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(V)},clone:function(t){return this.select(t?X:Z)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=Q(t+""),s=o.length;if(!(arguments.length<2)){for(a=e?et:tt,null==n&&(n=!1),r=0;r<s;++r)this.each(a(o[r],e,n));return this}var a=this.node().__on;if(a)for(var u,m=0,c=a.length;m<c;++m)for(r=0,u=a[m];r<s;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?it:rt)(t,e))}};var ut=[/([a-z0-9])([A-Z])/g,/([A-Z])([A-Z][a-z])/g],mt=/[^A-Z0-9]+/gi;function ct(t,e,n){return e instanceof RegExp?t.replace(e,n):e.reduce((function(t,e){return t.replace(e,n)}),t)}var lt=function(){return(lt=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function ht(t,e){return void 0===e&&(e={}),function(t,e){void 0===e&&(e={});for(var n=e.splitRegexp,r=void 0===n?ut:n,i=e.stripRegexp,o=void 0===i?mt:i,s=e.transform,a=void 0===s?at:s,u=e.delimiter,m=void 0===u?" ":u,c=ct(ct(t,r,"$1\0$2"),o,"\0"),l=0,h=c.length;"\0"===c.charAt(l);)l++;for(;"\0"===c.charAt(h-1);)h--;return c.slice(l,h).split("\0").map(a).join(m)}(t,lt({delimiter:"."},e))}var dt=function(){return(dt=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function ft({stringWidth:t,stringIndex:e}){return"number"==typeof t?t:t[e]||1}const pt=[{symbol:"##",replacement:"double-sharp"},{symbol:"bb",replacement:"double-flat"},{symbol:"#",replacement:"sharp"},{symbol:"b",replacement:"flat"}];function Pt(t,e){if("boolean"==typeof e)return e?null:"false";if("note"===t){for(let t=0;t<pt.length;t++){const{symbol:n,replacement:r}=pt[t];if(`${e}`.endsWith(n))return`${`${e}`[0]}-${r}`}return`${e}`}return`${e}`}function Mt(t,e=""){return[e?`dot-${e}`:null,...Object.entries(t).map((([t,n])=>{let r;return r=n instanceof Array?n:[n],r.map((n=>function(t,e,n){return["dot",t,(r=e,void 0===i&&(i={}),ht(r,dt({delimiter:"-"},i))),Pt(e,n)].filter((t=>!!t)).join("-");var r,i}(e,t,n))).join(" ")}))].filter((t=>!!t)).join(" ")}function gt({topPadding:t,bottomPadding:e,leftPadding:n,rightPadding:r,width:i,height:o,showFretNumbers:s,fretNumbersHeight:a}){let u=o+t+e;return s&&(u+=a),{totalWidth:i+n+r,totalHeight:u}}const bt="#666",yt="#ff636c",vt="#555",At="white",wt="#333",_t="#111",xt="#666",jt=960,Ct=150,Ot=20,St=1,Tt=7,Et={default:["E2","A2","D3","G3","B3","E4"],halfStepDown:["Eb2","Ab2","Db3","Gb3","Bb3","Eb4"],dropD:["D2","A2","D3","G3","B3","E4"],openG:["D2","G2","D3","G3","B3","D4"],DADGAD:["D2","A2","D3","G3","A3","D4"]},Nt=(t,e)=>Array(Math.abs(e)+1).join(t);function Dt(t){return null!==t&&"object"==typeof t&&"string"==typeof t.name}function Lt(t){return null!==t&&"object"==typeof t&&"number"==typeof t.step&&"number"==typeof t.alt}const $t=[0,2,4,-1,1,3,5],Gt=$t.map((t=>Math.floor(7*t/12)));function Bt(t){const{step:e,alt:n,oct:r,dir:i=1}=t,o=$t[e]+7*n;return void 0===r?[i*o]:[i*o,i*(r-Gt[e]-4*n)]}const Ft=[3,0,4,1,5,2,6];function kt(t){const[e,n,r]=t,i=Ft[function(t){const e=(t+1)%7;return e<0?7+e:e}(e)],o=Math.floor((e+1)/7);return void 0===n?{step:i,alt:o,dir:r}:{step:i,alt:o,oct:n+4*o+Gt[i],dir:r}}const Wt={empty:!0,name:"",pc:"",acc:""},It=new Map;function zt(t){const e=It.get(t);if(e)return e;const n="string"==typeof t?function(t){const e=function(t){const e=Rt.exec(t);return[e[1].toUpperCase(),e[2].replace(/x/g,"##"),e[3],e[4]]}(t);if(""===e[0]||""!==e[3])return Wt;const n=e[0],r=e[1],i=e[2],o=(n.charCodeAt(0)+3)%7,s=(t=>"b"===t[0]?-t.length:t.length)(r),a=i.length?+i:void 0,u=Bt({step:o,alt:s,oct:a}),m=n+r+i,c=n+r,l=(Ht[o]+s+120)%12,h=void 0===a?(f=Ht[o]+s,p=12,(f%p+p)%p-1188):Ht[o]+s+12*(a+1),d=h>=0&&h<=127?h:null;var f,p;return{empty:!1,acc:r,alt:s,chroma:l,coord:u,freq:void 0===a?null:440*Math.pow(2,(h-69)/12),height:h,letter:n,midi:d,name:m,oct:a,pc:c,step:o}}(t):Lt(t)?zt(function(t){const{step:e,alt:n,oct:r}=t,i=(t=>"CDEFGAB".charAt(t))(e);if(!i)return"";const o=i+(t=>t<0?Nt("b",-t):Nt("#",t))(n);return r||0===r?o+r:o}(t)):Dt(t)?zt(t.name):Wt;return It.set(t,n),n}const Rt=/^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)$/;const Ht=[0,2,4,5,7,9,11];const Ut={empty:!0,name:"",acc:""},qt=new RegExp("^([-+]?\\d+)(d{1,4}|m|M|P|A{1,4})|(AA|A|P|M|m|d|dd)([-+]?\\d+)$");const Vt={};function Zt(t){return"string"==typeof t?Vt[t]||(Vt[t]=function(t){const e=function(t){const e=qt.exec(`${t}`);return null===e?["",""]:e[1]?[e[1],e[2]]:[e[4],e[3]]}(t);if(""===e[0])return Ut;const n=+e[0],r=e[1],i=(Math.abs(n)-1)%7,o=Yt[i];if("M"===o&&"P"===r)return Ut;const s="M"===o?"majorable":"perfectable",a=""+n+r,u=n<0?-1:1,m=8===n||-8===n?n:u*(i+1),c=function(t,e){return"M"===e&&"majorable"===t||"P"===e&&"perfectable"===t?0:"m"===e&&"majorable"===t?-1:/^A+$/.test(e)?e.length:/^d+$/.test(e)?-1*("perfectable"===t?e.length:e.length+1):0}(s,r),l=Math.floor((Math.abs(n)-1)/7);return{empty:!1,name:a,num:n,q:r,step:i,alt:c,dir:u,type:s,simple:m,semitones:u*(Xt[i]+c+12*l),chroma:(u*(Xt[i]+c)%12+12)%12,coord:Bt({step:i,alt:c,oct:l,dir:u}),oct:l}}(t)):Lt(t)?Zt(function(t){const{step:e,alt:n,oct:r=0,dir:i}=t;return i?(i<0?"-":"")+(e+1+7*r)+function(t,e){return 0===e?"majorable"===t?"M":"P":-1===e&&"majorable"===t?"m":e>0?Nt("A",e):Nt("d","perfectable"===t?e:e+1)}("M"===Yt[e]?"majorable":"perfectable",n):""}(t)):Dt(t)?Zt(t.name):Ut}const Xt=[0,2,4,5,7,9,11],Yt="PMMPPMM";function Jt(t,e){const n=zt(t),r=Zt(e);if(n.empty||r.empty)return"";const i=n.coord,o=r.coord;return function(t){return zt(kt(t))}(1===i.length?[i[0]+o[0]]:[i[0]+o[0],i[1]+o[1]]).name}const Kt=zt,Qt=t=>Kt(t).chroma,te=Jt,ee=Zt,ne=function(t,e){const n=zt(t),r=zt(e);if(n.empty||r.empty)return"";const i=n.coord,o=r.coord,s=o[0]-i[0];return function(t){const[e,n=0]=t;return Zt(kt(7*e+12*n<0?[-e,-n,-1]:[e,n,1]))}([s,2===i.length&&2===o.length?o[1]-i[1]:-Math.floor(7*s/12)]).name};function re(t,e){const n=e.length,r=(t%n+n)%n;return e.slice(r,n).concat(e.slice(0,r))}const ie={empty:!0,name:"",setNum:0,chroma:"000000000000",normalized:"000000000000",intervals:[]},oe=t=>Number(t).toString(2),se=t=>parseInt(t,2),ae=/^[01]{12}$/;function ue(t){return ae.test(t)}const me={[ie.chroma]:ie};function ce(t){const e=ue(t)?t:"number"==typeof(n=t)&&n>=0&&n<=4095?oe(t):Array.isArray(t)?function(t){if(0===t.length)return ie.chroma;let e;const n=[0,0,0,0,0,0,0,0,0,0,0,0];for(let r=0;r<t.length;r++)e=zt(t[r]),e.empty&&(e=Zt(t[r])),e.empty||(n[e.chroma]=1);return n.join("")}(t):(t=>t&&ue(t.chroma))(t)?t.chroma:ie.chroma;var n;return me[e]=me[e]||function(t){const e=se(t),n=function(t){const e=t.split("");return e.map(((t,n)=>re(n,e).join("")))}(t).map(se).filter((t=>t>=2048)).sort()[0];return{empty:!1,name:"",setNum:e,chroma:t,normalized:oe(n),intervals:he(t)}}(e)}const le=["1P","2m","2M","3m","3M","4P","5d","5P","6m","6M","7m","7M"];function he(t){const e=[];for(let n=0;n<12;n++)"1"===t.charAt(n)&&e.push(le[n]);return e}let de=[];[["1P 3M 5P","major","M ^ "],["1P 3M 5P 7M","major seventh","maj7 Δ ma7 M7 Maj7 ^7"],["1P 3M 5P 7M 9M","major ninth","maj9 Δ9 ^9"],["1P 3M 5P 7M 9M 13M","major thirteenth","maj13 Maj13 ^13"],["1P 3M 5P 6M","sixth","6 add6 add13 M6"],["1P 3M 5P 6M 9M","sixth/ninth","6/9 69 M69"],["1P 3M 6m 7M","major seventh flat sixth","M7b6 ^7b6"],["1P 3M 5P 7M 11A","major seventh sharp eleventh","maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11"],["1P 3m 5P","minor","m min -"],["1P 3m 5P 7m","minor seventh","m7 min7 mi7 -7"],["1P 3m 5P 7M","minor/major seventh","m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7"],["1P 3m 5P 6M","minor sixth","m6 -6"],["1P 3m 5P 7m 9M","minor ninth","m9 -9"],["1P 3m 5P 7M 9M","minor/major ninth","mM9 mMaj9 -^9"],["1P 3m 5P 7m 9M 11P","minor eleventh","m11 -11"],["1P 3m 5P 7m 9M 13M","minor thirteenth","m13 -13"],["1P 3m 5d","diminished","dim ° o"],["1P 3m 5d 7d","diminished seventh","dim7 °7 o7"],["1P 3m 5d 7m","half-diminished","m7b5 ø -7b5 h7 h"],["1P 3M 5P 7m","dominant seventh","7 dom"],["1P 3M 5P 7m 9M","dominant ninth","9"],["1P 3M 5P 7m 9M 13M","dominant thirteenth","13"],["1P 3M 5P 7m 11A","lydian dominant seventh","7#11 7#4"],["1P 3M 5P 7m 9m","dominant flat ninth","7b9"],["1P 3M 5P 7m 9A","dominant sharp ninth","7#9"],["1P 3M 7m 9m","altered","alt7"],["1P 4P 5P","suspended fourth","sus4 sus"],["1P 2M 5P","suspended second","sus2"],["1P 4P 5P 7m","suspended fourth seventh","7sus4 7sus"],["1P 5P 7m 9M 11P","eleventh","11"],["1P 4P 5P 7m 9m","suspended fourth flat ninth","b9sus phryg 7b9sus 7b9sus4"],["1P 5P","fifth","5"],["1P 3M 5A","augmented","aug + +5 ^#5"],["1P 3m 5A","minor augmented","m#5 -#5 m+"],["1P 3M 5A 7M","augmented seventh","maj7#5 maj7+5 +maj7 ^7#5"],["1P 3M 5P 7M 9M 11A","major sharp eleventh (lydian)","maj9#11 Δ9#11 ^9#11"],["1P 2M 4P 5P","","sus24 sus4add9"],["1P 3M 5A 7M 9M","","maj9#5 Maj9#5"],["1P 3M 5A 7m","","7#5 +7 7+ 7aug aug7"],["1P 3M 5A 7m 9A","","7#5#9 7#9#5 7alt"],["1P 3M 5A 7m 9M","","9#5 9+"],["1P 3M 5A 7m 9M 11A","","9#5#11"],["1P 3M 5A 7m 9m","","7#5b9 7b9#5"],["1P 3M 5A 7m 9m 11A","","7#5b9#11"],["1P 3M 5A 9A","","+add#9"],["1P 3M 5A 9M","","M#5add9 +add9"],["1P 3M 5P 6M 11A","","M6#11 M6b5 6#11 6b5"],["1P 3M 5P 6M 7M 9M","","M7add13"],["1P 3M 5P 6M 9M 11A","","69#11"],["1P 3m 5P 6M 9M","","m69 -69"],["1P 3M 5P 6m 7m","","7b6"],["1P 3M 5P 7M 9A 11A","","maj7#9#11"],["1P 3M 5P 7M 9M 11A 13M","","M13#11 maj13#11 M13+4 M13#4"],["1P 3M 5P 7M 9m","","M7b9"],["1P 3M 5P 7m 11A 13m","","7#11b13 7b5b13"],["1P 3M 5P 7m 13M","","7add6 67 7add13"],["1P 3M 5P 7m 9A 11A","","7#9#11 7b5#9 7#9b5"],["1P 3M 5P 7m 9A 11A 13M","","13#9#11"],["1P 3M 5P 7m 9A 11A 13m","","7#9#11b13"],["1P 3M 5P 7m 9A 13M","","13#9"],["1P 3M 5P 7m 9A 13m","","7#9b13"],["1P 3M 5P 7m 9M 11A","","9#11 9+4 9#4"],["1P 3M 5P 7m 9M 11A 13M","","13#11 13+4 13#4"],["1P 3M 5P 7m 9M 11A 13m","","9#11b13 9b5b13"],["1P 3M 5P 7m 9m 11A","","7b9#11 7b5b9 7b9b5"],["1P 3M 5P 7m 9m 11A 13M","","13b9#11"],["1P 3M 5P 7m 9m 11A 13m","","7b9b13#11 7b9#11b13 7b5b9b13"],["1P 3M 5P 7m 9m 13M","","13b9"],["1P 3M 5P 7m 9m 13m","","7b9b13"],["1P 3M 5P 7m 9m 9A","","7b9#9"],["1P 3M 5P 9M","","Madd9 2 add9 add2"],["1P 3M 5P 9m","","Maddb9"],["1P 3M 5d","","Mb5"],["1P 3M 5d 6M 7m 9M","","13b5"],["1P 3M 5d 7M","","M7b5"],["1P 3M 5d 7M 9M","","M9b5"],["1P 3M 5d 7m","","7b5"],["1P 3M 5d 7m 9M","","9b5"],["1P 3M 7m","","7no5"],["1P 3M 7m 13m","","7b13"],["1P 3M 7m 9M","","9no5"],["1P 3M 7m 9M 13M","","13no5"],["1P 3M 7m 9M 13m","","9b13"],["1P 3m 4P 5P","","madd4"],["1P 3m 5P 6m 7M","","mMaj7b6"],["1P 3m 5P 6m 7M 9M","","mMaj9b6"],["1P 3m 5P 7m 11P","","m7add11 m7add4"],["1P 3m 5P 9M","","madd9"],["1P 3m 5d 6M 7M","","o7M7"],["1P 3m 5d 7M","","oM7"],["1P 3m 6m 7M","","mb6M7"],["1P 3m 6m 7m","","m7#5"],["1P 3m 6m 7m 9M","","m9#5"],["1P 3m 5A 7m 9M 11P","","m11A"],["1P 3m 6m 9m","","mb6b9"],["1P 2M 3m 5d 7m","","m9b5"],["1P 4P 5A 7M","","M7#5sus4"],["1P 4P 5A 7M 9M","","M9#5sus4"],["1P 4P 5A 7m","","7#5sus4"],["1P 4P 5P 7M","","M7sus4"],["1P 4P 5P 7M 9M","","M9sus4"],["1P 4P 5P 7m 9M","","9sus4 9sus"],["1P 4P 5P 7m 9M 13M","","13sus4 13sus"],["1P 4P 5P 7m 9m 13m","","7sus4b9b13 7b9b13sus4"],["1P 4P 7m 10m","","4 quartal"],["1P 5P 7m 9m 11P","","11b9"]].forEach((([t,e,n])=>function(t,e,n){const r=function(t){const e=e=>-1!==t.indexOf(e);return e("5A")?"Augmented":e("3M")?"Major":e("5d")?"Diminished":e("3m")?"Minor":"Unknown"}(t),i={...ce(t),name:n||"",quality:r,intervals:t,aliases:e};de.push(i),i.aliases.forEach((t=>{}))}(t.split(" "),n.split(" "),e))),de.sort(((t,e)=>t.setNum-e.setNum));const fe={...ie,intervals:[],aliases:[]};let pe={};function Pe(t,e,n=[]){const r={...ce(t),name:e,intervals:t,aliases:n};return pe[r.name]=r,pe[r.setNum]=r,pe[r.chroma]=r,r.aliases.forEach((t=>function(t,e){pe[e]=t}(r,t))),r}[["1P 2M 3M 5P 6M","major pentatonic","pentatonic"],["1P 3M 4P 5P 7M","ionian pentatonic"],["1P 3M 4P 5P 7m","mixolydian pentatonic","indian"],["1P 2M 4P 5P 6M","ritusen"],["1P 2M 4P 5P 7m","egyptian"],["1P 3M 4P 5d 7m","neopolitan major pentatonic"],["1P 3m 4P 5P 6m","vietnamese 1"],["1P 2m 3m 5P 6m","pelog"],["1P 2m 4P 5P 6m","kumoijoshi"],["1P 2M 3m 5P 6m","hirajoshi"],["1P 2m 4P 5d 7m","iwato"],["1P 2m 4P 5P 7m","in-sen"],["1P 3M 4A 5P 7M","lydian pentatonic","chinese"],["1P 3m 4P 6m 7m","malkos raga"],["1P 3m 4P 5d 7m","locrian pentatonic","minor seven flat five pentatonic"],["1P 3m 4P 5P 7m","minor pentatonic","vietnamese 2"],["1P 3m 4P 5P 6M","minor six pentatonic"],["1P 2M 3m 5P 6M","flat three pentatonic","kumoi"],["1P 2M 3M 5P 6m","flat six pentatonic"],["1P 2m 3M 5P 6M","scriabin"],["1P 3M 5d 6m 7m","whole tone pentatonic"],["1P 3M 4A 5A 7M","lydian #5P pentatonic"],["1P 3M 4A 5P 7m","lydian dominant pentatonic"],["1P 3m 4P 5P 7M","minor #7M pentatonic"],["1P 3m 4d 5d 7m","super locrian pentatonic"],["1P 2M 3m 4P 5P 7M","minor hexatonic"],["1P 2A 3M 5P 5A 7M","augmented"],["1P 2M 3m 3M 5P 6M","major blues"],["1P 2M 4P 5P 6M 7m","piongio"],["1P 2m 3M 4A 6M 7m","prometheus neopolitan"],["1P 2M 3M 4A 6M 7m","prometheus"],["1P 2m 3M 5d 6m 7m","mystery #1"],["1P 2m 3M 4P 5A 6M","six tone symmetric"],["1P 2M 3M 4A 5A 7m","whole tone","messiaen's mode #1"],["1P 2m 4P 4A 5P 7M","messiaen's mode #5"],["1P 3m 4P 5d 5P 7m","minor blues","blues"],["1P 2M 3M 4P 5d 6m 7m","locrian major","arabian"],["1P 2m 3M 4A 5P 6m 7M","double harmonic lydian"],["1P 2M 3m 4P 5P 6m 7M","harmonic minor"],["1P 2m 3m 4d 5d 6m 7m","altered","super locrian","diminished whole tone","pomeroy"],["1P 2M 3m 4P 5d 6m 7m","locrian #2","half-diminished","aeolian b5"],["1P 2M 3M 4P 5P 6m 7m","mixolydian b6","melodic minor fifth mode","hindu"],["1P 2M 3M 4A 5P 6M 7m","lydian dominant","lydian b7","overtone"],["1P 2M 3M 4A 5P 6M 7M","lydian"],["1P 2M 3M 4A 5A 6M 7M","lydian augmented"],["1P 2m 3m 4P 5P 6M 7m","dorian b2","phrygian #6","melodic minor second mode"],["1P 2M 3m 4P 5P 6M 7M","melodic minor"],["1P 2m 3m 4P 5d 6m 7m","locrian"],["1P 2m 3m 4d 5d 6m 7d","ultralocrian","superlocrian bb7","·superlocrian diminished"],["1P 2m 3m 4P 5d 6M 7m","locrian 6","locrian natural 6","locrian sharp 6"],["1P 2A 3M 4P 5P 5A 7M","augmented heptatonic"],["1P 2M 3m 5d 5P 6M 7m","romanian minor"],["1P 2M 3m 4A 5P 6M 7m","dorian #4"],["1P 2M 3m 4A 5P 6M 7M","lydian diminished"],["1P 2m 3m 4P 5P 6m 7m","phrygian"],["1P 2M 3M 4A 5A 7m 7M","leading whole tone"],["1P 2M 3M 4A 5P 6m 7m","lydian minor"],["1P 2m 3M 4P 5P 6m 7m","phrygian dominant","spanish","phrygian major"],["1P 2m 3m 4P 5P 6m 7M","balinese"],["1P 2m 3m 4P 5P 6M 7M","neopolitan major"],["1P 2M 3m 4P 5P 6m 7m","aeolian","minor"],["1P 2M 3M 4P 5P 6m 7M","harmonic major"],["1P 2m 3M 4P 5P 6m 7M","double harmonic major","gypsy"],["1P 2M 3m 4P 5P 6M 7m","dorian"],["1P 2M 3m 4A 5P 6m 7M","hungarian minor"],["1P 2A 3M 4A 5P 6M 7m","hungarian major"],["1P 2m 3M 4P 5d 6M 7m","oriental"],["1P 2m 3m 3M 4A 5P 7m","flamenco"],["1P 2m 3m 4A 5P 6m 7M","todi raga"],["1P 2M 3M 4P 5P 6M 7m","mixolydian","dominant"],["1P 2m 3M 4P 5d 6m 7M","persian"],["1P 2M 3M 4P 5P 6M 7M","major","ionian"],["1P 2m 3M 5d 6m 7m 7M","enigmatic"],["1P 2M 3M 4P 5A 6M 7M","major augmented","major #5","ionian augmented","ionian #5"],["1P 2A 3M 4A 5P 6M 7M","lydian #9"],["1P 2m 2M 4P 4A 5P 6m 7M","messiaen's mode #4"],["1P 2m 3M 4P 4A 5P 6m 7M","purvi raga"],["1P 2m 3m 3M 4P 5P 6m 7m","spanish heptatonic"],["1P 2M 3M 4P 5P 6M 7m 7M","bebop"],["1P 2M 3m 3M 4P 5P 6M 7m","bebop minor"],["1P 2M 3M 4P 5P 5A 6M 7M","bebop major"],["1P 2m 3m 4P 5d 5P 6m 7m","bebop locrian"],["1P 2M 3m 4P 5P 6m 7m 7M","minor bebop"],["1P 2M 3m 4P 5d 6m 6M 7M","diminished","whole-half diminished"],["1P 2M 3M 4P 5d 5P 6M 7M","ichikosucho"],["1P 2M 3m 4P 5P 6m 6M 7M","minor six diminished"],["1P 2m 3m 3M 4A 5P 6M 7m","half-whole diminished","dominant diminished","messiaen's mode #2"],["1P 3m 3M 4P 5P 6M 7m 7M","kafi raga"],["1P 2M 3M 4P 4A 5A 6A 7M","messiaen's mode #6"],["1P 2M 3m 3M 4P 5d 5P 6M 7m","composite blues"],["1P 2M 3m 3M 4A 5P 6m 7m 7M","messiaen's mode #3"],["1P 2m 2M 3m 4P 4A 5P 6m 6M 7M","messiaen's mode #7"],["1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M","chromatic"]].forEach((([t,e,...n])=>Pe(t.split(" "),e,n)));const Me={empty:!0,name:"",type:"",tonic:null,setNum:NaN,chroma:"",normalized:"",aliases:[],notes:[],intervals:[]};function ge(t){const e=Array.isArray(t)?t:function(t){if("string"!=typeof t)return["",""];const e=t.indexOf(" "),n=zt(t.substring(0,e));if(n.empty){const e=zt(t);return e.empty?["",t]:[e.name,""]}const r=t.substring(n.name.length+1);return[n.name,r.length?r:""]}(t),n=zt(e[0]).name,r=function(t){return pe[t]||fe}(e[1]);if(r.empty)return Me;const i=r.name,o=n?r.intervals.map((t=>Jt(n,t))):[],s=n?n+" "+i:i;return{...r,name:s,type:i,tonic:n,notes:o}}const be=[[0,2773,0,"ionian","","Maj7","major"],[1,2902,2,"dorian","m","m7"],[2,3418,4,"phrygian","m","m7"],[3,2741,-1,"lydian","","Maj7"],[4,2774,1,"mixolydian","","7"],[5,2906,3,"aeolian","m","m7","minor"],[6,3434,5,"locrian","dim","m7b5"]],ye={...ie,name:"",alt:0,modeNum:NaN,triad:"",seventh:"",aliases:[]},ve=be.map((function(t){const[e,n,r,i,o,s,a]=t,u=a?[a]:[],m=Number(n).toString(2);return{empty:!1,intervals:he(m),modeNum:e,chroma:m,normalized:m,name:i,setNum:n,alt:r,triad:o,seventh:s,aliases:u}})),Ae={};function we(t){return"string"==typeof t?Ae[t.toLowerCase()]||ye:t&&t.name?we(t.name):ye}function _e(t){return(e,n)=>{const r=we(e);if(r.empty)return[];const i=re(r.modeNum,t),o=r.intervals.map((t=>Jt(n,t)));return i.map(((t,e)=>o[e]+t))}}var xe;ve.forEach((t=>{Ae[t.name]=t,t.aliases.forEach((e=>{Ae[e]=t}))})),_e(be.map((t=>t[4]))),_e(be.map((t=>t[5]))),(xe=t.Systems||(t.Systems={})).pentatonic="pentatonic",xe.CAGED="CAGED",xe.TNPS="TNPS";const je=[{box:["-6-71","-34-5","71-2-","-5-6-","-2-34","-6-71"],baseChroma:Qt("G#"),baseOctave:2},{box:["71-2","-5-6","2-34","6-71","34-5","71-2"],baseChroma:Qt("E#"),baseOctave:2},{box:["-2-34","-6-71","34-5","71-2-","-5-6-","-2-34"],baseChroma:Qt("D#"),baseOctave:3},{box:["34-5","71-2","5-6-","2-34","6-71","34-5"],baseChroma:Qt("C"),baseOctave:3},{box:["-5-6-","-2-34","6-71-","34-5-","71-2-","-5-6-"],baseChroma:Qt("A#"),baseOctave:2}],Ce=[{box:["--2-34","--6-71","-34-5-","-71-2-","4-5-6-","1-2-3-"],baseChroma:Qt("E"),baseOctave:2},{box:["--34-5","--71-2","4-5-6-","1-2-3-","5-6-7-","2-34--"],baseChroma:Qt("D"),baseOctave:3},{box:["-4-5-6","-1-2-3","5-6-7-","2-34--","6-71--","34-5--"],baseChroma:Qt("C"),baseOctave:3},{box:["--5-6-7","--2-34-","-6-71--","-34-5--","-71-2--","4-5-6--"],baseChroma:Qt("B"),baseOctave:2},{box:["--6-71","--34-5","-71-2-","4-5-6-","1-2-3-","5-6-7-"],baseChroma:Qt("A"),baseOctave:2},{box:["--71-2","-4-5-6","1-2-3-","5-6-7-","2-34--","6-71--"],baseChroma:Qt("G"),baseOctave:2},{box:["-1-2-3","-5-6-7","2-34--","6-71--","34-5--","71-2--"],baseChroma:Qt("F"),baseOctave:2}];function Oe(t){const{modeNum:e}=we(t.replace("pentatonic","").trim());return e}function Se(t){return Qt("CDEFGAB".split("")[t])}function Te({root:e,mode:n=-1,system:r,box:i}){let o,s=r===t.Systems.pentatonic?5:0;switch("string"==typeof n?s=Oe(n):n>-1&&(s=n),r){case t.Systems.pentatonic:o=je[function(t,e){return 5===e?t-1:t%5}(+i,s)];break;case t.Systems.CAGED:o=je["GEDCA".indexOf(`${i}`)];break;case t.Systems.TNPS:o=Ce[+i-1]}if(!o)throw new Error(`Cannot find box ${i} in the ${t.Systems[r]} scale system`);const{baseChroma:a,box:u}=o;return function({root:t,box:e,modeOffset:n=0,baseChroma:r}){let i=Qt(t)-r-n;for(;i<-1;)i+=12;return e.reduce(((t,e,n)=>[...t,...e.split("").map(((t,e)=>"-"!==t?{string:n+1,fret:e+i}:null)).filter((t=>!!t))]),[])}({root:e,modeOffset:Se(s),baseChroma:a,box:r===t.Systems.pentatonic?u.slice().map((t=>t.replace("4","-").replace("7","-"))):u})}function Ee(t){let e=+t.slice(-1),n=t;return isNaN(e)?e=2:n=t.slice(0,-1),{octave:e,note:n}}function Ne({root:t,note:e,octave:n,baseOctave:r}){const i=Qt(e)||0;return(Qt(t)||0)>i?n-1-r:n-r}class De{constructor(t){this.tuning=Et.default,this.fretCount=15,Object.assign(this,t);const{note:e,octave:n}=Ee(this.tuning[0]);this.baseNote=e,this.baseOctave=n,this.populate()}getTuning(){return this.tuning}getFretCount(){return this.fretCount}getScale({type:t="major",root:n="C",box:r}){const{baseOctave:i}=this,{note:o}=Ee(n),s=`${o} ${t}`,{notes:a,empty:u,intervals:m}=ge(s);if(u)throw new Error(`Cannot find scale: ${s}`);const c=Oe(t),l=r?this.adjustOctave(Te(Object.assign({root:o,mode:c},r)),n):[],h=a.map(((t,e)=>({chroma:Qt(t),note:t,interval:m[e],degree:+m[e][0]})));return this.positions.filter((({chroma:t})=>h.find((e=>e.chroma===t)))).map((t=>{var{chroma:n}=t,r=e(t,["chroma"]);return Object.assign(Object.assign({},h.find((t=>t.chroma===n))),r)})).map((t=>{const e=this.getOctave(t),n=Object.assign({octave:e,octaveInScale:Ne(Object.assign({root:o,octave:e,baseOctave:i},t))},t);return l.length&&function({fret:t,string:e},n){return!!n.find((n=>n.fret===t&&n.string===e))}(t,l)&&(n.inBox=!0),n}))}adjustOctave(t,e){const{tuning:n}=this,r=Zt(ne(n[0],e)).semitones>=12,i=t.filter((t=>t.fret<0)).length>0;return t.map((({string:t,fret:e})=>({string:t,fret:r||i?e+12:e})))}populate(){const{tuning:t,fretCount:e}=this;this.positions=t.slice().reverse().reduce(((t,n,r)=>{const i=r+1,{chroma:o}=Kt(n);return[...t,...Array.from({length:e+1},((t,e)=>({string:i,fret:e,chroma:(o+e)%12})))]}),[])}getOctave({fret:t,string:e,chroma:n,note:r}){const{tuning:i}=this,o=i[i.length-e],{note:s,octave:a}=Ee(o);let u=n<Qt(s)?1:0;return"B#"===r&&u>0?u--:"Cb"===r&&0===u&&u++,u+=Math.floor(t/12),a+u}}const Le={el:"#fretboard",tuning:Et.default,stringCount:6,stringWidth:St,stringColor:bt,fretCount:15,fretWidth:St,fretColor:bt,nutWidth:Tt,nutColor:bt,middleFretColor:yt,middleFretWidth:3*St,scaleFrets:!0,crop:!1,fretLeftPadding:0,topPadding:Ot,bottomPadding:.75*Ot,leftPadding:Ot,rightPadding:Ot,height:Ct,width:jt,dotSize:Ot,dotStrokeColor:vt,dotStrokeWidth:2*St,dotTextSize:12,dotFill:At,dotText:()=>"",disabledOpacity:.9,showFretNumbers:!0,fretNumbersHeight:2*Ot,fretNumbersMargin:Ot,fretNumbersColor:bt,font:"Arial",barresColor:xt},$e={strings:[],width:15,strokeWidth:5,stroke:wt};function Ge({fret:t,string:e,frets:n,strings:r}){let i=0;return i=0===t?n[0]/2:n[t]-(n[t]-n[t-1])/2,{x:i,y:r[e-1]}}var Be,Fe;(Fe=t.TetrachordTypes||(t.TetrachordTypes={})).Major="Major",Fe.Minor="Minor",Fe.Phrygian="Phrygian",Fe.Harmonic="Harmonic",Fe.Lydian="Lydian",(Be=t.TetrachordLayouts||(t.TetrachordLayouts={}))[Be.Linear=0]="Linear",Be[Be.ThreePlusOne=1]="ThreePlusOne",Be[Be.TwoPlusTwo=2]="TwoPlusTwo",Be[Be.OnePlusThree=3]="OnePlusThree";const ke={[t.TetrachordTypes.Major]:["M2","M2","m2"],[t.TetrachordTypes.Minor]:["M2","m2","M2"],[t.TetrachordTypes.Phrygian]:["m2","M2","M2"],[t.TetrachordTypes.Harmonic]:["m2","A2","m2"],[t.TetrachordTypes.Lydian]:["M2","M2","M2"]};function We({box:t=[],from:e={string:6,fret:0},to:n={string:1,fret:100},action:r=(t=>t)}={}){return t.map((t=>function({string:t,fret:r}){return!(t>e.string||t<n.string||t===e.string&&r<e.fret||t===n.string&&r>n.fret)}(t)?r(t):t))}t.Fretboard=class{constructor(t={}){this.handlers={},this.dots=[],this.options=Object.assign({},Le,t),function(t){const{stringCount:e,tuning:n}=t;if(e!==n.length)throw new Error(`stringCount (${e}) and tuning size (${n.length}) do not match`)}(this.options);const{el:e,height:n,width:r,leftPadding:i,topPadding:o,stringCount:s,stringWidth:a,fretCount:u,scaleFrets:m,tuning:c}=this.options;this.strings=function({stringCount:t,stringWidth:e,height:n}){const r=[];let i=0;for(let o=0;o<t;o++){i=ft({stringWidth:e,stringIndex:o});let s=n/(t-1)*o;0===o&&(s+=i/2),o===t-1&&(s-=i/2),r.push(s)}return r}({stringCount:s,height:n,stringWidth:a}),this.frets=function({scaleFrets:t,fretCount:e}){const n=Math.pow(2,1/12),r=[0];for(let i=1;i<=e;i++){let o=100/e*i;t&&(o=100-100/Math.pow(n,i)),r.push(o)}return r.map((t=>t/r[r.length-1]*100))}({fretCount:u,scaleFrets:m});const{totalWidth:l,totalHeight:h}=gt(this.options);this.system=new De({fretCount:u,tuning:c}),this.positions=function({fretCount:t,stringCount:e,frets:n,strings:r}){const i=[];for(let o=1;o<=e;o++){const e=[];for(let i=0;i<=t;i++)e.push(Ge({fret:i,string:o,frets:n,strings:r}));i.push(e)}return i}(Object.assign(Object.assign({},this),this.options)),this.svg=function(t){return"string"==typeof t?new st([[document.querySelector(t)]],[document.documentElement]):new st([[t]],ot)}(e).append("div").attr("class","fretbard-html-wrapper").attr("style","position: relative").append("svg").attr("viewBox",`0 0 ${l} ${h}`),this.wrapper=this.svg.append("g").attr("class","fretboard-wrapper").attr("transform",`translate(${i}, ${o}) scale(${r/l})`)}render(){const{wrapper:t,positions:e,dots:n}=this,{font:r,dotStrokeColor:i,dotStrokeWidth:o,dotFill:s,dotSize:a,dotText:u,dotTextSize:m,disabledOpacity:c}=this.options,l=this.getDotOffset();if(this.baseRender(l),t.select(".dots").remove(),!n.length)return this;const h=t.append("g").attr("class","dots").attr("font-family",r).selectAll("g").data(n).enter().filter((({fret:t})=>t>=0)).append("g").attr("class",(t=>["dot",Mt(t,"")].join(" "))).attr("opacity",(({disabled:t})=>t?c:1));return h.append("circle").attr("class","dot-circle").attr("cx",(({string:t,fret:n})=>`${e[t-1][n-l].x}%`)).attr("cy",(({string:t,fret:n})=>e[t-1][n-l].y)).attr("r",.5*a).attr("stroke",i).attr("stroke-width",o).attr("fill",s),h.append("text").attr("class","dot-text").attr("x",(({string:t,fret:n})=>`${e[t-1][n-l].x}%`)).attr("y",(({string:t,fret:n})=>e[t-1][n-l].y)).attr("text-anchor","middle").attr("dominant-baseline","central").attr("font-size",m).text(u),this}setDots(t){return this.dots=t,this}clear(){return this.setDots([]),this.wrapper.select(".dots").remove(),this}style(t){var{filter:n=(()=>!0),text:r,fontSize:i,fontFill:o}=t,s=e(t,["filter","text","fontSize","fontFill"]);const{wrapper:a}=this,{dotTextSize:u}=this.options,m=n instanceof Function?n:t=>{const[e,r]=Object.entries(n)[0];return t[e]===r},c=a.selectAll(".dot-circle").filter(m);return Object.keys(s).forEach((t=>c.attr(t,s[t]))),r&&a.selectAll(".dot-text").filter(m).text(r).attr("font-size",i||u).attr("fill",o||_t),this}muteStrings(t){const{wrapper:e,positions:n}=this,{strings:r,stroke:i,strokeWidth:o,width:s}=Object.assign(Object.assign({},$e),t);return e.append("g").attr("class","muted-strings").attr("transform",`translate(${-s/2}, ${-s/2})`).selectAll("path").data(r).enter().append("path").attr("d",(t=>{const{y:e}=n[t-1][0];return[`M 0 ${e}`,`L ${s} ${e+s}`,`M ${s} ${e}`,`L 0 ${e+s}`].join(" ")})).attr("stroke",i).attr("stroke-width",o).attr("class","muted-string"),this}renderChord(t,e){const{positions:n,mutedStrings:r}=function(t){const e=[],n=[],r=t.indexOf("-")>-1?"-":"";return t.split(r).reverse().forEach(((t,r)=>{"0"!==t&&("x"!==t?e.push({fret:+t,string:r+1}):n.push(r+1))})),{positions:e,mutedStrings:n}}(t);return this.setDots(n),e&&this.renderBarres([].concat(e)),this.render(),this.muteStrings({strings:r}),this}renderScale({type:t,root:e,box:n}){n&&this.options.tuning.toString()!==Et.default.toString()&&console.warn("Selected scale system works for standard tuning. Wrong notes may be highlighted.");const r=this.system.getScale({type:t,root:e,box:n});return this.setDots(r).render()}renderBox({type:t,root:e,box:n}){this.options.tuning.toString()!==Et.default.toString()&&console.warn("Selected scale system works for standard tuning. Wrong notes may be highlighted.");const r=this.system.getScale({type:t,root:e,box:n}).filter((({inBox:t})=>t));return this.setDots(r).render()}on(t,e){const{svg:n,options:r,strings:i,frets:o,hoverDiv:s,dots:a}=this,u=n.select(".strings");return s||(this.hoverDiv=function({bottomPadding:t,showFretNumbers:e,fretNumbersHeight:n}){const r=document.createElement("div"),i=t+(e?n:0);return r.className="hoverDiv",r.style.position="absolute",r.style.top="0",r.style.bottom=`${i}px`,r.style.left="0",r.style.right="0",r}(r),n.node().parentNode.appendChild(this.hoverDiv)),this.handlers[t]?this.hoverDiv.removeEventListener(t,this.handlers[t]):(this.handlers[t]=function(t,e,n,r){var i,o=!1,s=0;function a(){i&&clearTimeout(i)}function u(){for(var u=arguments.length,m=new Array(u),c=0;c<u;c++)m[c]=arguments[c];var l=this,h=Date.now()-s;function d(){s=Date.now(),n.apply(l,m)}function f(){i=void 0}o||(r&&!i&&d(),a(),void 0===r&&h>t?d():!0!==e&&(i=setTimeout(r?f:d,void 0===r?t-h:t)))}return"boolean"!=typeof e&&(r=n,n=e,e=void 0),u.cancel=function(){a(),o=!0},u}(50,(t=>e((({event:t,stringsGroup:e,leftPadding:n,nutWidth:r,strings:i,frets:o,dots:s})=>{const{width:a,height:u}=e.node().getBoundingClientRect(),m=t.target.getBoundingClientRect(),c=t.clientX-m.left,l=t.clientY-m.top;let h=0;const d=u/(i.length-1);for(let t=0;t<i.length;t++)if(l<d*(t+1)){h=t;break}let f=-1;const p=Math.max(0,c-n)/a*100;for(let t=0;t<o.length;t++){if(p<o[t]){f=t;break}f=t}return c<n+r&&(f=0),s.find((({fret:t,string:e})=>t===f&&e===h+1))||{string:h+1,fret:f}})(Object.assign({event:t,stringsGroup:u,strings:i,frets:o,dots:a},r))))),this.hoverDiv.addEventListener(t,this.handlers[t])),this}removeEventListeners(){const{hoverDiv:t,handlers:e}=this;return t?(Object.entries(e).map((([e,n])=>t.removeEventListener(e,n))),this):this}renderBarres(t){const{wrapper:e,strings:n,options:r,positions:i}=this,o=t.map((({fret:t,stringFrom:e,stringTo:r})=>({fret:t,stringFrom:e?Math.min(e,n.length):n.length,stringTo:r?Math.max(r,1):1}))),{dotSize:s,barresColor:a}=r,u=this.getDotOffset(),m=.8*s;e.append("g").attr("class","barres").attr("transform",`translate(-${.5*m}, 0)`).selectAll("rect").data(o).enter().append("rect").attr("y",(({fret:t,stringTo:e})=>i[e-1][t-u].y-.75*s)).attr("x",(({fret:t,stringFrom:e})=>`${i[e-1][t-u].x}%`)).attr("rx",7.5).attr("width",m).attr("height",(({stringFrom:t,stringTo:e})=>n[t-1]-n[e-1]+1.5*s)).attr("fill",a)}baseRender(t){if(this.baseRendered)return;const{wrapper:e,frets:n,strings:r}=this,{height:i,font:o,nutColor:s,nutWidth:a,stringColor:u,stringWidth:m,fretColor:c,fretWidth:l,middleFretWidth:h,middleFretColor:d,showFretNumbers:f,fretNumbersMargin:p,fretNumbersColor:P,topPadding:M}=this.options,{totalWidth:g}=gt(this.options);e.append("g").attr("class","strings").selectAll("line").data(r).enter().append("line").attr("x1",0).attr("y1",(t=>t)).attr("x2","100%").attr("y2",(t=>t)).attr("stroke",u).attr("stroke-width",((t,e)=>ft({stringWidth:m,stringIndex:e}))),e.append("g").attr("class","frets").selectAll("line").data(n).enter().append("line").attr("x1",(t=>`${t}%`)).attr("y1",1).attr("x2",(t=>`${t}%`)).attr("y2",i-1).attr("stroke",((t,e)=>{switch(e){case 0:return s;case 12:return d;default:return c}})).attr("stroke-width",((t,e)=>{switch(e){case 0:return a;case 12:return h;default:return l}})),f&&e.append("g").attr("class","fret-numbers").attr("font-family",o).attr("transform",`translate(0 ${p+M+r[r.length-1]})`).selectAll("text").data(n.slice(1)).enter().append("text").attr("text-anchor","middle").attr("x",((t,e)=>g/100*(t-(t-n[e])/2))).attr("fill",((t,e)=>11===e?d:P)).text(((e,n)=>`${n+1+t}`)),this.baseRendered=!0}getDotOffset(){const{dots:t}=this,{crop:e,fretLeftPadding:n}=this.options;return e?Math.max(0,Math.min(...t.map((({fret:t})=>t)))-1-n):0}},t.FretboardSystem=De,t.GUITAR_TUNINGS=Et,t.disableDots=function({box:t=[],from:e={string:6,fret:0},to:n={string:1,fret:100}}={}){return We({box:t,from:e,to:n,action:t=>Object.assign({disabled:!0},t)})},t.disableStrings=function({box:t=[],strings:n=[]}){return t.map((t=>{var{string:r}=t,i=e(t,["string"]);return Object.assign({string:r,disabled:n.indexOf(r)>-1},i)}))},t.sliceBox=function({box:t=[],from:e={string:6,fret:0},to:n={string:1,fret:100}}={}){const r=t.slice().sort(((t,e)=>t.string>e.string?-1:t.fret>e.fret?1:-1));function i(t){return r.findIndex((({string:e,fret:n})=>e===t.string&&n===t.fret))}let o=i(e);-1===o&&(o=0);let s=i(n);return-1===s&&(s=r.length),r.slice(o,s)},t.tetrachord=function({root:e,type:n,layout:r,string:i,fret:o}={root:"E",type:t.TetrachordTypes.Major,layout:t.TetrachordLayouts.Linear,string:6,fret:0}){const s=ke[n],a=[{string:i,fret:o,note:e}];let u=0,m=e;if(r===t.TetrachordLayouts.Linear)return s.forEach((t=>{const{semitones:e}=ee(t);m=te(m,t),u+=e,a.push({string:i,fret:o+u,note:m})})),a;if(1===i)throw new Error("Cannot split a tetrachord over two strings if starting on the first one");let c=i;const l=(()=>{switch(r){case t.TetrachordLayouts.ThreePlusOne:return 2;case t.TetrachordLayouts.TwoPlusTwo:return 1;case t.TetrachordLayouts.OnePlusThree:return 0}})();return s.forEach(((t,e)=>{const{semitones:n}=ee(t);m=te(m,t),e===l&&(c-=1,u=2===c?u-4:u-5),u+=n;const r=o+u;if(r<0)throw new Error("Cannot use this layout from this starting fret");a.push({string:c,fret:r,note:m})})),a},Object.defineProperty(t,"__esModule",{value:!0})}(e)},786:(t,e,n)=>{"use strict";n.r(e)},929:function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var i=n(16),o=n(845);n(786);var s,a=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],u=["Major","Minor"],m={root:a[0],highlightTriads:!1,instrument:o.instruments[0],tuning:o.instruments[0].tunings[0],mode:u[0],stringWidth:function(){return(t=m.tuning.strings.length,Array.from({length:t},(function(t,e){return e}))).map((function(t,e){return e>0?.5*t:.5})).map((function(t){return t>2?2:t}));var t}},c=document.getElementById("tuning-select");function l(t){m=r(r({},m),t);var e=c.cloneNode(!0);c.parentNode.replaceChild(e,c),(c=e).innerHTML=m.instrument.tunings.map((function(t){var e=t.title;return'\n            <option value="'+e+'" '+(t===m.tuning?"selected":"")+">"+e+"</option>\n            "})).join(""),c.disabled=1==m.instrument.tunings.length,c.addEventListener("change",(function(t){var e=t.target.value;h({tuning:m.instrument.tunings.find((function(t){return t.title===e}))})})),h({})}function h(t){if(m=r(r({},m),t),document.getElementById("fretboard").innerHTML="",(s=new i.Fretboard({el:"#fretboard",dotFill:"white",fretCount:16,tuning:m.tuning.strings,stringCount:m.tuning.strings.length,font:"Nunito",middleFretColor:"#666",stringWidth:m.stringWidth()})).renderScale({root:m.root,type:m.mode.toLowerCase()}).style({fontSize:10}),m.highlightTriads){var e=new Set(["1P","3M","3m","5P"]);s.style({filter:{interval:"1P"},text:function(){return"1P"},fill:"#e76f51"}).style({filter:{interval:"3"+("Major"==m.mode?"M":"m")},text:function(){return"3"+("Major"==m.mode?"M":"m")},fill:"#F29727"}).style({filter:{interval:"5P"},text:function(){return"5P"},fill:"#D89D6A"}).style({filter:function(t){var n=t.interval;return!e.has(n)},opacity:.5})}else s.style({text:function(t){return t.note}})}document.getElementById("highlight-triads").addEventListener("change",(function(t){h({highlightTriads:t.target.checked})}));var d=document.getElementById("instrument-select"),f=document.getElementById("root-note"),p=document.getElementById("mode");d.innerHTML=o.instruments.map((function(t){var e=t.title.toLowerCase();return'\n        <option value="'+e+'" '+(m.instrument===t?"selected":"")+">"+e+"</option>\n        "})).join(""),d.addEventListener("change",(function(t){var e=t.target.value,n=o.instruments.find((function(t){return t.title.toLowerCase()===e}));l({instrument:n,tuning:n.tunings[0]})})),f.innerHTML=a.map((function(t){return"\n        <option value='"+t+"' "+(t==m.root?"selected":"")+">"+t+"</option>\n        "})).join(""),f.addEventListener("change",(function(t){h({root:t.target.value})})),p.innerHTML=u.map((function(t){return"\n        <option value='"+t+"' "+(t==m.mode?"selected":"")+">"+t+"</option>\n        "})).join(""),p.addEventListener("change",(function(t){h({mode:t.target.value})})),l({})},845:function(t,e,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r};Object.defineProperty(e,"__esModule",{value:!0}),e.instruments=void 0;var i=n(16),o={title:"Guitar",tunings:[{title:"standard",strings:i.GUITAR_TUNINGS.default},{title:"drop D",strings:i.GUITAR_TUNINGS.dropD},{title:"drop C",strings:["C2","G2","C3","F3","A3","D4"]}]},s={title:"Guitar 7s",tunings:[{title:"standard",strings:r(["B2"],i.GUITAR_TUNINGS.default)},{title:"drop A",strings:r(["A2"],i.GUITAR_TUNINGS.default)}]};e.instruments=[o,s,{title:"Bass",tunings:[{title:"standard",strings:["E1","A1","D2","G2"]}]},{title:"Ukulele",tunings:[{title:"standard",strings:["G4","C4","E4","A4"]}]}]}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(929)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,