/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={16:function(t,e){!function(t){"use strict";function e(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(t);o<r.length;o++)e.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(t,r[o])&&(n[r[o]]=t[r[o]])}return n}var n="http://www.w3.org/1999/xhtml",r={svg:"http://www.w3.org/2000/svg",xhtml:n,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function o(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),r.hasOwnProperty(e)?{space:r[e],local:t}:t}function i(t){return function(){var e=this.ownerDocument,r=this.namespaceURI;return r===n&&e.documentElement.namespaceURI===n?e.createElement(t):e.createElementNS(r,t)}}function s(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function a(t){var e=o(t);return(e.local?s:i)(e)}function u(){}function c(t){return null==t?u:function(){return this.querySelector(t)}}function l(){return[]}function m(t){return new Array(t.length)}function d(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}d.prototype={constructor:d,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function h(t,e,n,r,o,i){for(var s,a=0,u=e.length,c=i.length;a<c;++a)(s=e[a])?(s.__data__=i[a],r[a]=s):n[a]=new d(t,i[a]);for(;a<u;++a)(s=e[a])&&(o[a]=s)}function f(t,e,n,r,o,i,s){var a,u,c,l={},m=e.length,h=i.length,f=new Array(m);for(a=0;a<m;++a)(u=e[a])&&(f[a]=c="$"+s.call(u,u.__data__,a,e),c in l?o[a]=u:l[c]=u);for(a=0;a<h;++a)(u=l[c="$"+s.call(t,i[a],a,i)])?(r[a]=u,u.__data__=i[a],l[c]=null):n[a]=new d(t,i[a]);for(a=0;a<m;++a)(u=e[a])&&l[f[a]]===u&&(o[a]=u)}function p(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function P(t){return function(){this.removeAttribute(t)}}function g(t){return function(){this.removeAttributeNS(t.space,t.local)}}function M(t,e){return function(){this.setAttribute(t,e)}}function y(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function b(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function v(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function A(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function w(t){return function(){this.style.removeProperty(t)}}function x(t,e,n){return function(){this.style.setProperty(t,e,n)}}function _(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function C(t,e){return t.style.getPropertyValue(e)||A(t).getComputedStyle(t,null).getPropertyValue(e)}function j(t){return function(){delete this[t]}}function T(t,e){return function(){this[t]=e}}function S(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function O(t){return t.trim().split(/^|\s+/)}function E(t){return t.classList||new N(t)}function N(t){this._node=t,this._names=O(t.getAttribute("class")||"")}function $(t,e){for(var n=E(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function L(t,e){for(var n=E(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}function D(t){return function(){$(this,t)}}function F(t){return function(){L(this,t)}}function B(t,e){return function(){(e.apply(this,arguments)?$:L)(this,t)}}function G(){this.textContent=""}function k(t){return function(){this.textContent=t}}function R(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function W(){this.innerHTML=""}function I(t){return function(){this.innerHTML=t}}function z(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function H(){this.nextSibling&&this.parentNode.appendChild(this)}function U(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function q(){return null}function V(){var t=this.parentNode;t&&t.removeChild(this)}function Z(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function X(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}N.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Y={};function J(t,e,n){return t=K(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function K(t,e,n){return function(r){try{t.call(this,this.__data__,e,n)}finally{}}}function Q(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function tt(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.capture);++o?e.length=o:delete this.__on}}}function et(t,e,n){var r=Y.hasOwnProperty(t.type)?J:K;return function(o,i,s){var a,u=this.__on,c=r(e,i,s);if(u)for(var l=0,m=u.length;l<m;++l)if((a=u[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=c,a.capture=n),void(a.value=e);this.addEventListener(t.type,c,n),a={type:t.type,name:t.name,value:e,listener:c,capture:n},u?u.push(a):this.__on=[a]}}function nt(t,e,n){var r=A(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}function rt(t,e){return function(){return nt(this,t,e)}}function ot(t,e){return function(){return nt(this,t,e.apply(this,arguments))}}"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Y={mouseenter:"mouseover",mouseleave:"mouseout"}));var it=[null];function st(t,e){this._groups=t,this._parents=e}function at(t){return t.toLowerCase()}st.prototype=function(){return new st([[document.documentElement]],it)}.prototype={constructor:st,select:function(t){"function"!=typeof t&&(t=c(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s,a=e[o],u=a.length,l=r[o]=new Array(u),m=0;m<u;++m)(i=a[m])&&(s=t.call(i,i.__data__,m,a))&&("__data__"in i&&(s.__data__=i.__data__),l[m]=s);return new st(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=function(t){return null==t?l:function(){return this.querySelectorAll(t)}}(t));for(var e=this._groups,n=e.length,r=[],o=[],i=0;i<n;++i)for(var s,a=e[i],u=a.length,c=0;c<u;++c)(s=a[c])&&(r.push(t.call(s,s.__data__,c,a)),o.push(s));return new st(r,o)},filter:function(t){"function"!=typeof t&&(t=function(t){return function(){return this.matches(t)}}(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s=e[o],a=s.length,u=r[o]=[],c=0;c<a;++c)(i=s[c])&&t.call(i,i.__data__,c,s)&&u.push(i);return new st(r,this._parents)},data:function(t,e){if(!t)return P=new Array(this.size()),l=-1,this.each((function(t){P[++l]=t})),P;var n,r=e?f:h,o=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=i.length,a=new Array(s),u=new Array(s),c=new Array(s),l=0;l<s;++l){var m=o[l],d=i[l],p=d.length,P=t.call(m,m&&m.__data__,l,o),g=P.length,M=u[l]=new Array(g),y=a[l]=new Array(g);r(m,d,M,y,c[l]=new Array(p),P,e);for(var b,v,A=0,w=0;A<g;++A)if(b=M[A]){for(A>=w&&(w=A+1);!(v=y[w])&&++w<g;);b._next=v||null}}return(a=new st(a,o))._enter=u,a._exit=c,a},enter:function(){return new st(this._enter||this._groups.map(m),this._parents)},exit:function(){return new st(this._exit||this._groups.map(m),this._parents)},join:function(t,e,n){var r=this.enter(),o=this,i=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(o=e(o)),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),s=new Array(r),a=0;a<i;++a)for(var u,c=e[a],l=n[a],m=c.length,d=s[a]=new Array(m),h=0;h<m;++h)(u=c[h]||l[h])&&(d[h]=u);for(;a<r;++a)s[a]=e[a];return new st(s,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],i=o.length-1,s=o[i];--i>=0;)(r=o[i])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=p);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var s,a=n[i],u=a.length,c=o[i]=new Array(u),l=0;l<u;++l)(s=a[l])&&(c[l]=s);c.sort(e)}return new st(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,i=r.length;o<i;++o){var s=r[o];if(s)return s}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,i=e[n],s=0,a=i.length;s<a;++s)(o=i[s])&&t.call(o,o.__data__,s,i);return this},attr:function(t,e){var n=o(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?g:P:"function"==typeof e?n.local?v:b:n.local?y:M)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?w:"function"==typeof e?_:x)(t,e,null==n?"":n)):C(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?j:"function"==typeof e?S:T)(t,e)):this.node()[t]},classed:function(t,e){var n=O(t+"");if(arguments.length<2){for(var r=E(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?B:e?D:F)(n,e))},text:function(t){return arguments.length?this.each(null==t?G:("function"==typeof t?R:k)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?W:("function"==typeof t?z:I)(t)):this.node().innerHTML},raise:function(){return this.each(H)},lower:function(){return this.each(U)},append:function(t){var e="function"==typeof t?t:a(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:a(t),r=null==e?q:"function"==typeof e?e:c(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(V)},clone:function(t){return this.select(t?X:Z)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,i=Q(t+""),s=i.length;if(!(arguments.length<2)){for(a=e?et:tt,null==n&&(n=!1),r=0;r<s;++r)this.each(a(i[r],e,n));return this}var a=this.node().__on;if(a)for(var u,c=0,l=a.length;c<l;++c)for(r=0,u=a[c];r<s;++r)if((o=i[r]).type===u.type&&o.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?ot:rt)(t,e))}};var ut=[/([a-z0-9])([A-Z])/g,/([A-Z])([A-Z][a-z])/g],ct=/[^A-Z0-9]+/gi;function lt(t,e,n){return e instanceof RegExp?t.replace(e,n):e.reduce((function(t,e){return t.replace(e,n)}),t)}var mt=function(){return(mt=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function dt(t,e){return void 0===e&&(e={}),function(t,e){void 0===e&&(e={});for(var n=e.splitRegexp,r=void 0===n?ut:n,o=e.stripRegexp,i=void 0===o?ct:o,s=e.transform,a=void 0===s?at:s,u=e.delimiter,c=void 0===u?" ":u,l=lt(lt(t,r,"$1\0$2"),i,"\0"),m=0,d=l.length;"\0"===l.charAt(m);)m++;for(;"\0"===l.charAt(d-1);)d--;return l.slice(m,d).split("\0").map(a).join(c)}(t,mt({delimiter:"."},e))}var ht=function(){return(ht=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function ft({stringWidth:t,stringIndex:e}){return"number"==typeof t?t:t[e]||1}const pt=[{symbol:"##",replacement:"double-sharp"},{symbol:"bb",replacement:"double-flat"},{symbol:"#",replacement:"sharp"},{symbol:"b",replacement:"flat"}];function Pt(t,e){if("boolean"==typeof e)return e?null:"false";if("note"===t){for(let t=0;t<pt.length;t++){const{symbol:n,replacement:r}=pt[t];if(`${e}`.endsWith(n))return`${`${e}`[0]}-${r}`}return`${e}`}return`${e}`}function gt(t,e=""){return[e?`dot-${e}`:null,...Object.entries(t).map((([t,n])=>{let r;return r=n instanceof Array?n:[n],r.map((n=>function(t,e,n){return["dot",t,(r=e,void 0===o&&(o={}),dt(r,ht({delimiter:"-"},o))),Pt(e,n)].filter((t=>!!t)).join("-");var r,o}(e,t,n))).join(" ")}))].filter((t=>!!t)).join(" ")}function Mt({topPadding:t,bottomPadding:e,leftPadding:n,rightPadding:r,width:o,height:i,showFretNumbers:s,fretNumbersHeight:a}){let u=i+t+e;return s&&(u+=a),{totalWidth:o+n+r,totalHeight:u}}const yt="#666",bt="#ff636c",vt="#555",At="white",wt="#333",xt="#111",_t="#666",Ct=960,jt=150,Tt=20,St=1,Ot=7,Et={default:["E2","A2","D3","G3","B3","E4"],halfStepDown:["Eb2","Ab2","Db3","Gb3","Bb3","Eb4"],dropD:["D2","A2","D3","G3","B3","E4"],openG:["D2","G2","D3","G3","B3","D4"],DADGAD:["D2","A2","D3","G3","A3","D4"]},Nt=(t,e)=>Array(Math.abs(e)+1).join(t);function $t(t){return null!==t&&"object"==typeof t&&"string"==typeof t.name}function Lt(t){return null!==t&&"object"==typeof t&&"number"==typeof t.step&&"number"==typeof t.alt}const Dt=[0,2,4,-1,1,3,5],Ft=Dt.map((t=>Math.floor(7*t/12)));function Bt(t){const{step:e,alt:n,oct:r,dir:o=1}=t,i=Dt[e]+7*n;return void 0===r?[o*i]:[o*i,o*(r-Ft[e]-4*n)]}const Gt=[3,0,4,1,5,2,6];function kt(t){const[e,n,r]=t,o=Gt[function(t){const e=(t+1)%7;return e<0?7+e:e}(e)],i=Math.floor((e+1)/7);return void 0===n?{step:o,alt:i,dir:r}:{step:o,alt:i,oct:n+4*i+Ft[o],dir:r}}const Rt={empty:!0,name:"",pc:"",acc:""},Wt=new Map;function It(t){const e=Wt.get(t);if(e)return e;const n="string"==typeof t?function(t){const e=function(t){const e=zt.exec(t);return[e[1].toUpperCase(),e[2].replace(/x/g,"##"),e[3],e[4]]}(t);if(""===e[0]||""!==e[3])return Rt;const n=e[0],r=e[1],o=e[2],i=(n.charCodeAt(0)+3)%7,s=(t=>"b"===t[0]?-t.length:t.length)(r),a=o.length?+o:void 0,u=Bt({step:i,alt:s,oct:a}),c=n+r+o,l=n+r,m=(Ht[i]+s+120)%12,d=void 0===a?(f=Ht[i]+s,p=12,(f%p+p)%p-1188):Ht[i]+s+12*(a+1),h=d>=0&&d<=127?d:null;var f,p;return{empty:!1,acc:r,alt:s,chroma:m,coord:u,freq:void 0===a?null:440*Math.pow(2,(d-69)/12),height:d,letter:n,midi:h,name:c,oct:a,pc:l,step:i}}(t):Lt(t)?It(function(t){const{step:e,alt:n,oct:r}=t,o=(t=>"CDEFGAB".charAt(t))(e);if(!o)return"";const i=o+(t=>t<0?Nt("b",-t):Nt("#",t))(n);return r||0===r?i+r:i}(t)):$t(t)?It(t.name):Rt;return Wt.set(t,n),n}const zt=/^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)$/;const Ht=[0,2,4,5,7,9,11];const Ut={empty:!0,name:"",acc:""},qt=new RegExp("^([-+]?\\d+)(d{1,4}|m|M|P|A{1,4})|(AA|A|P|M|m|d|dd)([-+]?\\d+)$");const Vt={};function Zt(t){return"string"==typeof t?Vt[t]||(Vt[t]=function(t){const e=function(t){const e=qt.exec(`${t}`);return null===e?["",""]:e[1]?[e[1],e[2]]:[e[4],e[3]]}(t);if(""===e[0])return Ut;const n=+e[0],r=e[1],o=(Math.abs(n)-1)%7,i=Yt[o];if("M"===i&&"P"===r)return Ut;const s="M"===i?"majorable":"perfectable",a=""+n+r,u=n<0?-1:1,c=8===n||-8===n?n:u*(o+1),l=function(t,e){return"M"===e&&"majorable"===t||"P"===e&&"perfectable"===t?0:"m"===e&&"majorable"===t?-1:/^A+$/.test(e)?e.length:/^d+$/.test(e)?-1*("perfectable"===t?e.length:e.length+1):0}(s,r),m=Math.floor((Math.abs(n)-1)/7);return{empty:!1,name:a,num:n,q:r,step:o,alt:l,dir:u,type:s,simple:c,semitones:u*(Xt[o]+l+12*m),chroma:(u*(Xt[o]+l)%12+12)%12,coord:Bt({step:o,alt:l,oct:m,dir:u}),oct:m}}(t)):Lt(t)?Zt(function(t){const{step:e,alt:n,oct:r=0,dir:o}=t;return o?(o<0?"-":"")+(e+1+7*r)+function(t,e){return 0===e?"majorable"===t?"M":"P":-1===e&&"majorable"===t?"m":e>0?Nt("A",e):Nt("d","perfectable"===t?e:e+1)}("M"===Yt[e]?"majorable":"perfectable",n):""}(t)):$t(t)?Zt(t.name):Ut}const Xt=[0,2,4,5,7,9,11],Yt="PMMPPMM";function Jt(t,e){const n=It(t),r=Zt(e);if(n.empty||r.empty)return"";const o=n.coord,i=r.coord;return function(t){return It(kt(t))}(1===o.length?[o[0]+i[0]]:[o[0]+i[0],o[1]+i[1]]).name}const Kt=It,Qt=t=>Kt(t).chroma,te=Jt,ee=Zt,ne=function(t,e){const n=It(t),r=It(e);if(n.empty||r.empty)return"";const o=n.coord,i=r.coord,s=i[0]-o[0];return function(t){const[e,n=0]=t;return Zt(kt(7*e+12*n<0?[-e,-n,-1]:[e,n,1]))}([s,2===o.length&&2===i.length?i[1]-o[1]:-Math.floor(7*s/12)]).name};function re(t,e){const n=e.length,r=(t%n+n)%n;return e.slice(r,n).concat(e.slice(0,r))}const oe={empty:!0,name:"",setNum:0,chroma:"000000000000",normalized:"000000000000",intervals:[]},ie=t=>Number(t).toString(2),se=t=>parseInt(t,2),ae=/^[01]{12}$/;function ue(t){return ae.test(t)}const ce={[oe.chroma]:oe};function le(t){const e=ue(t)?t:"number"==typeof(n=t)&&n>=0&&n<=4095?ie(t):Array.isArray(t)?function(t){if(0===t.length)return oe.chroma;let e;const n=[0,0,0,0,0,0,0,0,0,0,0,0];for(let r=0;r<t.length;r++)e=It(t[r]),e.empty&&(e=Zt(t[r])),e.empty||(n[e.chroma]=1);return n.join("")}(t):(t=>t&&ue(t.chroma))(t)?t.chroma:oe.chroma;var n;return ce[e]=ce[e]||function(t){const e=se(t),n=function(t){const e=t.split("");return e.map(((t,n)=>re(n,e).join("")))}(t).map(se).filter((t=>t>=2048)).sort()[0];return{empty:!1,name:"",setNum:e,chroma:t,normalized:ie(n),intervals:de(t)}}(e)}const me=["1P","2m","2M","3m","3M","4P","5d","5P","6m","6M","7m","7M"];function de(t){const e=[];for(let n=0;n<12;n++)"1"===t.charAt(n)&&e.push(me[n]);return e}let he=[];[["1P 3M 5P","major","M ^ "],["1P 3M 5P 7M","major seventh","maj7 Δ ma7 M7 Maj7 ^7"],["1P 3M 5P 7M 9M","major ninth","maj9 Δ9 ^9"],["1P 3M 5P 7M 9M 13M","major thirteenth","maj13 Maj13 ^13"],["1P 3M 5P 6M","sixth","6 add6 add13 M6"],["1P 3M 5P 6M 9M","sixth/ninth","6/9 69 M69"],["1P 3M 6m 7M","major seventh flat sixth","M7b6 ^7b6"],["1P 3M 5P 7M 11A","major seventh sharp eleventh","maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11"],["1P 3m 5P","minor","m min -"],["1P 3m 5P 7m","minor seventh","m7 min7 mi7 -7"],["1P 3m 5P 7M","minor/major seventh","m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7"],["1P 3m 5P 6M","minor sixth","m6 -6"],["1P 3m 5P 7m 9M","minor ninth","m9 -9"],["1P 3m 5P 7M 9M","minor/major ninth","mM9 mMaj9 -^9"],["1P 3m 5P 7m 9M 11P","minor eleventh","m11 -11"],["1P 3m 5P 7m 9M 13M","minor thirteenth","m13 -13"],["1P 3m 5d","diminished","dim ° o"],["1P 3m 5d 7d","diminished seventh","dim7 °7 o7"],["1P 3m 5d 7m","half-diminished","m7b5 ø -7b5 h7 h"],["1P 3M 5P 7m","dominant seventh","7 dom"],["1P 3M 5P 7m 9M","dominant ninth","9"],["1P 3M 5P 7m 9M 13M","dominant thirteenth","13"],["1P 3M 5P 7m 11A","lydian dominant seventh","7#11 7#4"],["1P 3M 5P 7m 9m","dominant flat ninth","7b9"],["1P 3M 5P 7m 9A","dominant sharp ninth","7#9"],["1P 3M 7m 9m","altered","alt7"],["1P 4P 5P","suspended fourth","sus4 sus"],["1P 2M 5P","suspended second","sus2"],["1P 4P 5P 7m","suspended fourth seventh","7sus4 7sus"],["1P 5P 7m 9M 11P","eleventh","11"],["1P 4P 5P 7m 9m","suspended fourth flat ninth","b9sus phryg 7b9sus 7b9sus4"],["1P 5P","fifth","5"],["1P 3M 5A","augmented","aug + +5 ^#5"],["1P 3m 5A","minor augmented","m#5 -#5 m+"],["1P 3M 5A 7M","augmented seventh","maj7#5 maj7+5 +maj7 ^7#5"],["1P 3M 5P 7M 9M 11A","major sharp eleventh (lydian)","maj9#11 Δ9#11 ^9#11"],["1P 2M 4P 5P","","sus24 sus4add9"],["1P 3M 5A 7M 9M","","maj9#5 Maj9#5"],["1P 3M 5A 7m","","7#5 +7 7+ 7aug aug7"],["1P 3M 5A 7m 9A","","7#5#9 7#9#5 7alt"],["1P 3M 5A 7m 9M","","9#5 9+"],["1P 3M 5A 7m 9M 11A","","9#5#11"],["1P 3M 5A 7m 9m","","7#5b9 7b9#5"],["1P 3M 5A 7m 9m 11A","","7#5b9#11"],["1P 3M 5A 9A","","+add#9"],["1P 3M 5A 9M","","M#5add9 +add9"],["1P 3M 5P 6M 11A","","M6#11 M6b5 6#11 6b5"],["1P 3M 5P 6M 7M 9M","","M7add13"],["1P 3M 5P 6M 9M 11A","","69#11"],["1P 3m 5P 6M 9M","","m69 -69"],["1P 3M 5P 6m 7m","","7b6"],["1P 3M 5P 7M 9A 11A","","maj7#9#11"],["1P 3M 5P 7M 9M 11A 13M","","M13#11 maj13#11 M13+4 M13#4"],["1P 3M 5P 7M 9m","","M7b9"],["1P 3M 5P 7m 11A 13m","","7#11b13 7b5b13"],["1P 3M 5P 7m 13M","","7add6 67 7add13"],["1P 3M 5P 7m 9A 11A","","7#9#11 7b5#9 7#9b5"],["1P 3M 5P 7m 9A 11A 13M","","13#9#11"],["1P 3M 5P 7m 9A 11A 13m","","7#9#11b13"],["1P 3M 5P 7m 9A 13M","","13#9"],["1P 3M 5P 7m 9A 13m","","7#9b13"],["1P 3M 5P 7m 9M 11A","","9#11 9+4 9#4"],["1P 3M 5P 7m 9M 11A 13M","","13#11 13+4 13#4"],["1P 3M 5P 7m 9M 11A 13m","","9#11b13 9b5b13"],["1P 3M 5P 7m 9m 11A","","7b9#11 7b5b9 7b9b5"],["1P 3M 5P 7m 9m 11A 13M","","13b9#11"],["1P 3M 5P 7m 9m 11A 13m","","7b9b13#11 7b9#11b13 7b5b9b13"],["1P 3M 5P 7m 9m 13M","","13b9"],["1P 3M 5P 7m 9m 13m","","7b9b13"],["1P 3M 5P 7m 9m 9A","","7b9#9"],["1P 3M 5P 9M","","Madd9 2 add9 add2"],["1P 3M 5P 9m","","Maddb9"],["1P 3M 5d","","Mb5"],["1P 3M 5d 6M 7m 9M","","13b5"],["1P 3M 5d 7M","","M7b5"],["1P 3M 5d 7M 9M","","M9b5"],["1P 3M 5d 7m","","7b5"],["1P 3M 5d 7m 9M","","9b5"],["1P 3M 7m","","7no5"],["1P 3M 7m 13m","","7b13"],["1P 3M 7m 9M","","9no5"],["1P 3M 7m 9M 13M","","13no5"],["1P 3M 7m 9M 13m","","9b13"],["1P 3m 4P 5P","","madd4"],["1P 3m 5P 6m 7M","","mMaj7b6"],["1P 3m 5P 6m 7M 9M","","mMaj9b6"],["1P 3m 5P 7m 11P","","m7add11 m7add4"],["1P 3m 5P 9M","","madd9"],["1P 3m 5d 6M 7M","","o7M7"],["1P 3m 5d 7M","","oM7"],["1P 3m 6m 7M","","mb6M7"],["1P 3m 6m 7m","","m7#5"],["1P 3m 6m 7m 9M","","m9#5"],["1P 3m 5A 7m 9M 11P","","m11A"],["1P 3m 6m 9m","","mb6b9"],["1P 2M 3m 5d 7m","","m9b5"],["1P 4P 5A 7M","","M7#5sus4"],["1P 4P 5A 7M 9M","","M9#5sus4"],["1P 4P 5A 7m","","7#5sus4"],["1P 4P 5P 7M","","M7sus4"],["1P 4P 5P 7M 9M","","M9sus4"],["1P 4P 5P 7m 9M","","9sus4 9sus"],["1P 4P 5P 7m 9M 13M","","13sus4 13sus"],["1P 4P 5P 7m 9m 13m","","7sus4b9b13 7b9b13sus4"],["1P 4P 7m 10m","","4 quartal"],["1P 5P 7m 9m 11P","","11b9"]].forEach((([t,e,n])=>function(t,e,n){const r=function(t){const e=e=>-1!==t.indexOf(e);return e("5A")?"Augmented":e("3M")?"Major":e("5d")?"Diminished":e("3m")?"Minor":"Unknown"}(t),o={...le(t),name:n||"",quality:r,intervals:t,aliases:e};he.push(o),o.aliases.forEach((t=>{}))}(t.split(" "),n.split(" "),e))),he.sort(((t,e)=>t.setNum-e.setNum));const fe={...oe,intervals:[],aliases:[]};let pe={};function Pe(t,e,n=[]){const r={...le(t),name:e,intervals:t,aliases:n};return pe[r.name]=r,pe[r.setNum]=r,pe[r.chroma]=r,r.aliases.forEach((t=>function(t,e){pe[e]=t}(r,t))),r}[["1P 2M 3M 5P 6M","major pentatonic","pentatonic"],["1P 3M 4P 5P 7M","ionian pentatonic"],["1P 3M 4P 5P 7m","mixolydian pentatonic","indian"],["1P 2M 4P 5P 6M","ritusen"],["1P 2M 4P 5P 7m","egyptian"],["1P 3M 4P 5d 7m","neopolitan major pentatonic"],["1P 3m 4P 5P 6m","vietnamese 1"],["1P 2m 3m 5P 6m","pelog"],["1P 2m 4P 5P 6m","kumoijoshi"],["1P 2M 3m 5P 6m","hirajoshi"],["1P 2m 4P 5d 7m","iwato"],["1P 2m 4P 5P 7m","in-sen"],["1P 3M 4A 5P 7M","lydian pentatonic","chinese"],["1P 3m 4P 6m 7m","malkos raga"],["1P 3m 4P 5d 7m","locrian pentatonic","minor seven flat five pentatonic"],["1P 3m 4P 5P 7m","minor pentatonic","vietnamese 2"],["1P 3m 4P 5P 6M","minor six pentatonic"],["1P 2M 3m 5P 6M","flat three pentatonic","kumoi"],["1P 2M 3M 5P 6m","flat six pentatonic"],["1P 2m 3M 5P 6M","scriabin"],["1P 3M 5d 6m 7m","whole tone pentatonic"],["1P 3M 4A 5A 7M","lydian #5P pentatonic"],["1P 3M 4A 5P 7m","lydian dominant pentatonic"],["1P 3m 4P 5P 7M","minor #7M pentatonic"],["1P 3m 4d 5d 7m","super locrian pentatonic"],["1P 2M 3m 4P 5P 7M","minor hexatonic"],["1P 2A 3M 5P 5A 7M","augmented"],["1P 2M 3m 3M 5P 6M","major blues"],["1P 2M 4P 5P 6M 7m","piongio"],["1P 2m 3M 4A 6M 7m","prometheus neopolitan"],["1P 2M 3M 4A 6M 7m","prometheus"],["1P 2m 3M 5d 6m 7m","mystery #1"],["1P 2m 3M 4P 5A 6M","six tone symmetric"],["1P 2M 3M 4A 5A 7m","whole tone","messiaen's mode #1"],["1P 2m 4P 4A 5P 7M","messiaen's mode #5"],["1P 3m 4P 5d 5P 7m","minor blues","blues"],["1P 2M 3M 4P 5d 6m 7m","locrian major","arabian"],["1P 2m 3M 4A 5P 6m 7M","double harmonic lydian"],["1P 2M 3m 4P 5P 6m 7M","harmonic minor"],["1P 2m 3m 4d 5d 6m 7m","altered","super locrian","diminished whole tone","pomeroy"],["1P 2M 3m 4P 5d 6m 7m","locrian #2","half-diminished","aeolian b5"],["1P 2M 3M 4P 5P 6m 7m","mixolydian b6","melodic minor fifth mode","hindu"],["1P 2M 3M 4A 5P 6M 7m","lydian dominant","lydian b7","overtone"],["1P 2M 3M 4A 5P 6M 7M","lydian"],["1P 2M 3M 4A 5A 6M 7M","lydian augmented"],["1P 2m 3m 4P 5P 6M 7m","dorian b2","phrygian #6","melodic minor second mode"],["1P 2M 3m 4P 5P 6M 7M","melodic minor"],["1P 2m 3m 4P 5d 6m 7m","locrian"],["1P 2m 3m 4d 5d 6m 7d","ultralocrian","superlocrian bb7","·superlocrian diminished"],["1P 2m 3m 4P 5d 6M 7m","locrian 6","locrian natural 6","locrian sharp 6"],["1P 2A 3M 4P 5P 5A 7M","augmented heptatonic"],["1P 2M 3m 5d 5P 6M 7m","romanian minor"],["1P 2M 3m 4A 5P 6M 7m","dorian #4"],["1P 2M 3m 4A 5P 6M 7M","lydian diminished"],["1P 2m 3m 4P 5P 6m 7m","phrygian"],["1P 2M 3M 4A 5A 7m 7M","leading whole tone"],["1P 2M 3M 4A 5P 6m 7m","lydian minor"],["1P 2m 3M 4P 5P 6m 7m","phrygian dominant","spanish","phrygian major"],["1P 2m 3m 4P 5P 6m 7M","balinese"],["1P 2m 3m 4P 5P 6M 7M","neopolitan major"],["1P 2M 3m 4P 5P 6m 7m","aeolian","minor"],["1P 2M 3M 4P 5P 6m 7M","harmonic major"],["1P 2m 3M 4P 5P 6m 7M","double harmonic major","gypsy"],["1P 2M 3m 4P 5P 6M 7m","dorian"],["1P 2M 3m 4A 5P 6m 7M","hungarian minor"],["1P 2A 3M 4A 5P 6M 7m","hungarian major"],["1P 2m 3M 4P 5d 6M 7m","oriental"],["1P 2m 3m 3M 4A 5P 7m","flamenco"],["1P 2m 3m 4A 5P 6m 7M","todi raga"],["1P 2M 3M 4P 5P 6M 7m","mixolydian","dominant"],["1P 2m 3M 4P 5d 6m 7M","persian"],["1P 2M 3M 4P 5P 6M 7M","major","ionian"],["1P 2m 3M 5d 6m 7m 7M","enigmatic"],["1P 2M 3M 4P 5A 6M 7M","major augmented","major #5","ionian augmented","ionian #5"],["1P 2A 3M 4A 5P 6M 7M","lydian #9"],["1P 2m 2M 4P 4A 5P 6m 7M","messiaen's mode #4"],["1P 2m 3M 4P 4A 5P 6m 7M","purvi raga"],["1P 2m 3m 3M 4P 5P 6m 7m","spanish heptatonic"],["1P 2M 3M 4P 5P 6M 7m 7M","bebop"],["1P 2M 3m 3M 4P 5P 6M 7m","bebop minor"],["1P 2M 3M 4P 5P 5A 6M 7M","bebop major"],["1P 2m 3m 4P 5d 5P 6m 7m","bebop locrian"],["1P 2M 3m 4P 5P 6m 7m 7M","minor bebop"],["1P 2M 3m 4P 5d 6m 6M 7M","diminished","whole-half diminished"],["1P 2M 3M 4P 5d 5P 6M 7M","ichikosucho"],["1P 2M 3m 4P 5P 6m 6M 7M","minor six diminished"],["1P 2m 3m 3M 4A 5P 6M 7m","half-whole diminished","dominant diminished","messiaen's mode #2"],["1P 3m 3M 4P 5P 6M 7m 7M","kafi raga"],["1P 2M 3M 4P 4A 5A 6A 7M","messiaen's mode #6"],["1P 2M 3m 3M 4P 5d 5P 6M 7m","composite blues"],["1P 2M 3m 3M 4A 5P 6m 7m 7M","messiaen's mode #3"],["1P 2m 2M 3m 4P 4A 5P 6m 6M 7M","messiaen's mode #7"],["1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M","chromatic"]].forEach((([t,e,...n])=>Pe(t.split(" "),e,n)));const ge={empty:!0,name:"",type:"",tonic:null,setNum:NaN,chroma:"",normalized:"",aliases:[],notes:[],intervals:[]};function Me(t){const e=Array.isArray(t)?t:function(t){if("string"!=typeof t)return["",""];const e=t.indexOf(" "),n=It(t.substring(0,e));if(n.empty){const e=It(t);return e.empty?["",t]:[e.name,""]}const r=t.substring(n.name.length+1);return[n.name,r.length?r:""]}(t),n=It(e[0]).name,r=function(t){return pe[t]||fe}(e[1]);if(r.empty)return ge;const o=r.name,i=n?r.intervals.map((t=>Jt(n,t))):[],s=n?n+" "+o:o;return{...r,name:s,type:o,tonic:n,notes:i}}const ye=[[0,2773,0,"ionian","","Maj7","major"],[1,2902,2,"dorian","m","m7"],[2,3418,4,"phrygian","m","m7"],[3,2741,-1,"lydian","","Maj7"],[4,2774,1,"mixolydian","","7"],[5,2906,3,"aeolian","m","m7","minor"],[6,3434,5,"locrian","dim","m7b5"]],be={...oe,name:"",alt:0,modeNum:NaN,triad:"",seventh:"",aliases:[]},ve=ye.map((function(t){const[e,n,r,o,i,s,a]=t,u=a?[a]:[],c=Number(n).toString(2);return{empty:!1,intervals:de(c),modeNum:e,chroma:c,normalized:c,name:o,setNum:n,alt:r,triad:i,seventh:s,aliases:u}})),Ae={};function we(t){return"string"==typeof t?Ae[t.toLowerCase()]||be:t&&t.name?we(t.name):be}function xe(t){return(e,n)=>{const r=we(e);if(r.empty)return[];const o=re(r.modeNum,t),i=r.intervals.map((t=>Jt(n,t)));return o.map(((t,e)=>i[e]+t))}}var _e;ve.forEach((t=>{Ae[t.name]=t,t.aliases.forEach((e=>{Ae[e]=t}))})),xe(ye.map((t=>t[4]))),xe(ye.map((t=>t[5]))),(_e=t.Systems||(t.Systems={})).pentatonic="pentatonic",_e.CAGED="CAGED",_e.TNPS="TNPS";const Ce=[{box:["-6-71","-34-5","71-2-","-5-6-","-2-34","-6-71"],baseChroma:Qt("G#"),baseOctave:2},{box:["71-2","-5-6","2-34","6-71","34-5","71-2"],baseChroma:Qt("E#"),baseOctave:2},{box:["-2-34","-6-71","34-5","71-2-","-5-6-","-2-34"],baseChroma:Qt("D#"),baseOctave:3},{box:["34-5","71-2","5-6-","2-34","6-71","34-5"],baseChroma:Qt("C"),baseOctave:3},{box:["-5-6-","-2-34","6-71-","34-5-","71-2-","-5-6-"],baseChroma:Qt("A#"),baseOctave:2}],je=[{box:["--2-34","--6-71","-34-5-","-71-2-","4-5-6-","1-2-3-"],baseChroma:Qt("E"),baseOctave:2},{box:["--34-5","--71-2","4-5-6-","1-2-3-","5-6-7-","2-34--"],baseChroma:Qt("D"),baseOctave:3},{box:["-4-5-6","-1-2-3","5-6-7-","2-34--","6-71--","34-5--"],baseChroma:Qt("C"),baseOctave:3},{box:["--5-6-7","--2-34-","-6-71--","-34-5--","-71-2--","4-5-6--"],baseChroma:Qt("B"),baseOctave:2},{box:["--6-71","--34-5","-71-2-","4-5-6-","1-2-3-","5-6-7-"],baseChroma:Qt("A"),baseOctave:2},{box:["--71-2","-4-5-6","1-2-3-","5-6-7-","2-34--","6-71--"],baseChroma:Qt("G"),baseOctave:2},{box:["-1-2-3","-5-6-7","2-34--","6-71--","34-5--","71-2--"],baseChroma:Qt("F"),baseOctave:2}];function Te(t){const{modeNum:e}=we(t.replace("pentatonic","").trim());return e}function Se(t){return Qt("CDEFGAB".split("")[t])}function Oe({root:e,mode:n=-1,system:r,box:o}){let i,s=r===t.Systems.pentatonic?5:0;switch("string"==typeof n?s=Te(n):n>-1&&(s=n),r){case t.Systems.pentatonic:i=Ce[function(t,e){return 5===e?t-1:t%5}(+o,s)];break;case t.Systems.CAGED:i=Ce["GEDCA".indexOf(`${o}`)];break;case t.Systems.TNPS:i=je[+o-1]}if(!i)throw new Error(`Cannot find box ${o} in the ${t.Systems[r]} scale system`);const{baseChroma:a,box:u}=i;return function({root:t,box:e,modeOffset:n=0,baseChroma:r}){let o=Qt(t)-r-n;for(;o<-1;)o+=12;return e.reduce(((t,e,n)=>[...t,...e.split("").map(((t,e)=>"-"!==t?{string:n+1,fret:e+o}:null)).filter((t=>!!t))]),[])}({root:e,modeOffset:Se(s),baseChroma:a,box:r===t.Systems.pentatonic?u.slice().map((t=>t.replace("4","-").replace("7","-"))):u})}function Ee(t){let e=+t.slice(-1),n=t;return isNaN(e)?e=2:n=t.slice(0,-1),{octave:e,note:n}}function Ne({root:t,note:e,octave:n,baseOctave:r}){const o=Qt(e)||0;return(Qt(t)||0)>o?n-1-r:n-r}class $e{constructor(t){this.tuning=Et.default,this.fretCount=15,Object.assign(this,t);const{note:e,octave:n}=Ee(this.tuning[0]);this.baseNote=e,this.baseOctave=n,this.populate()}getTuning(){return this.tuning}getFretCount(){return this.fretCount}getScale({type:t="major",root:n="C",box:r}){const{baseOctave:o}=this,{note:i}=Ee(n),s=`${i} ${t}`,{notes:a,empty:u,intervals:c}=Me(s);if(u)throw new Error(`Cannot find scale: ${s}`);const l=Te(t),m=r?this.adjustOctave(Oe(Object.assign({root:i,mode:l},r)),n):[],d=a.map(((t,e)=>({chroma:Qt(t),note:t,interval:c[e],degree:+c[e][0]})));return this.positions.filter((({chroma:t})=>d.find((e=>e.chroma===t)))).map((t=>{var{chroma:n}=t,r=e(t,["chroma"]);return Object.assign(Object.assign({},d.find((t=>t.chroma===n))),r)})).map((t=>{const e=this.getOctave(t),n=Object.assign({octave:e,octaveInScale:Ne(Object.assign({root:i,octave:e,baseOctave:o},t))},t);return m.length&&function({fret:t,string:e},n){return!!n.find((n=>n.fret===t&&n.string===e))}(t,m)&&(n.inBox=!0),n}))}adjustOctave(t,e){const{tuning:n}=this,r=Zt(ne(n[0],e)).semitones>=12,o=t.filter((t=>t.fret<0)).length>0;return t.map((({string:t,fret:e})=>({string:t,fret:r||o?e+12:e})))}populate(){const{tuning:t,fretCount:e}=this;this.positions=t.slice().reverse().reduce(((t,n,r)=>{const o=r+1,{chroma:i}=Kt(n);return[...t,...Array.from({length:e+1},((t,e)=>({string:o,fret:e,chroma:(i+e)%12})))]}),[])}getOctave({fret:t,string:e,chroma:n,note:r}){const{tuning:o}=this,i=o[o.length-e],{note:s,octave:a}=Ee(i);let u=n<Qt(s)?1:0;return"B#"===r&&u>0?u--:"Cb"===r&&0===u&&u++,u+=Math.floor(t/12),a+u}}const Le={el:"#fretboard",tuning:Et.default,stringCount:6,stringWidth:St,stringColor:yt,fretCount:15,fretWidth:St,fretColor:yt,nutWidth:Ot,nutColor:yt,middleFretColor:bt,middleFretWidth:3*St,scaleFrets:!0,crop:!1,fretLeftPadding:0,topPadding:Tt,bottomPadding:.75*Tt,leftPadding:Tt,rightPadding:Tt,height:jt,width:Ct,dotSize:Tt,dotStrokeColor:vt,dotStrokeWidth:2*St,dotTextSize:12,dotFill:At,dotText:()=>"",disabledOpacity:.9,showFretNumbers:!0,fretNumbersHeight:2*Tt,fretNumbersMargin:Tt,fretNumbersColor:yt,font:"Arial",barresColor:_t},De={strings:[],width:15,strokeWidth:5,stroke:wt};function Fe({fret:t,string:e,frets:n,strings:r}){let o=0;return o=0===t?n[0]/2:n[t]-(n[t]-n[t-1])/2,{x:o,y:r[e-1]}}var Be,Ge;(Ge=t.TetrachordTypes||(t.TetrachordTypes={})).Major="Major",Ge.Minor="Minor",Ge.Phrygian="Phrygian",Ge.Harmonic="Harmonic",Ge.Lydian="Lydian",(Be=t.TetrachordLayouts||(t.TetrachordLayouts={}))[Be.Linear=0]="Linear",Be[Be.ThreePlusOne=1]="ThreePlusOne",Be[Be.TwoPlusTwo=2]="TwoPlusTwo",Be[Be.OnePlusThree=3]="OnePlusThree";const ke={[t.TetrachordTypes.Major]:["M2","M2","m2"],[t.TetrachordTypes.Minor]:["M2","m2","M2"],[t.TetrachordTypes.Phrygian]:["m2","M2","M2"],[t.TetrachordTypes.Harmonic]:["m2","A2","m2"],[t.TetrachordTypes.Lydian]:["M2","M2","M2"]};function Re({box:t=[],from:e={string:6,fret:0},to:n={string:1,fret:100},action:r=(t=>t)}={}){return t.map((t=>function({string:t,fret:r}){return!(t>e.string||t<n.string||t===e.string&&r<e.fret||t===n.string&&r>n.fret)}(t)?r(t):t))}t.Fretboard=class{constructor(t={}){this.handlers={},this.dots=[],this.options=Object.assign({},Le,t),function(t){const{stringCount:e,tuning:n}=t;if(e!==n.length)throw new Error(`stringCount (${e}) and tuning size (${n.length}) do not match`)}(this.options);const{el:e,height:n,width:r,leftPadding:o,topPadding:i,stringCount:s,stringWidth:a,fretCount:u,scaleFrets:c,tuning:l}=this.options;this.strings=function({stringCount:t,stringWidth:e,height:n}){const r=[];let o=0;for(let i=0;i<t;i++){o=ft({stringWidth:e,stringIndex:i});let s=n/(t-1)*i;0===i&&(s+=o/2),i===t-1&&(s-=o/2),r.push(s)}return r}({stringCount:s,height:n,stringWidth:a}),this.frets=function({scaleFrets:t,fretCount:e}){const n=Math.pow(2,1/12),r=[0];for(let o=1;o<=e;o++){let i=100/e*o;t&&(i=100-100/Math.pow(n,o)),r.push(i)}return r.map((t=>t/r[r.length-1]*100))}({fretCount:u,scaleFrets:c});const{totalWidth:m,totalHeight:d}=Mt(this.options);this.system=new $e({fretCount:u,tuning:l}),this.positions=function({fretCount:t,stringCount:e,frets:n,strings:r}){const o=[];for(let i=1;i<=e;i++){const e=[];for(let o=0;o<=t;o++)e.push(Fe({fret:o,string:i,frets:n,strings:r}));o.push(e)}return o}(Object.assign(Object.assign({},this),this.options)),this.svg=function(t){return"string"==typeof t?new st([[document.querySelector(t)]],[document.documentElement]):new st([[t]],it)}(e).append("div").attr("class","fretbard-html-wrapper").attr("style","position: relative").append("svg").attr("viewBox",`0 0 ${m} ${d}`),this.wrapper=this.svg.append("g").attr("class","fretboard-wrapper").attr("transform",`translate(${o}, ${i}) scale(${r/m})`)}render(){const{wrapper:t,positions:e,dots:n}=this,{font:r,dotStrokeColor:o,dotStrokeWidth:i,dotFill:s,dotSize:a,dotText:u,dotTextSize:c,disabledOpacity:l}=this.options,m=this.getDotOffset();if(this.baseRender(m),t.select(".dots").remove(),!n.length)return this;const d=t.append("g").attr("class","dots").attr("font-family",r).selectAll("g").data(n).enter().filter((({fret:t})=>t>=0)).append("g").attr("class",(t=>["dot",gt(t,"")].join(" "))).attr("opacity",(({disabled:t})=>t?l:1));return d.append("circle").attr("class","dot-circle").attr("cx",(({string:t,fret:n})=>`${e[t-1][n-m].x}%`)).attr("cy",(({string:t,fret:n})=>e[t-1][n-m].y)).attr("r",.5*a).attr("stroke",o).attr("stroke-width",i).attr("fill",s),d.append("text").attr("class","dot-text").attr("x",(({string:t,fret:n})=>`${e[t-1][n-m].x}%`)).attr("y",(({string:t,fret:n})=>e[t-1][n-m].y)).attr("text-anchor","middle").attr("dominant-baseline","central").attr("font-size",c).text(u),this}setDots(t){return this.dots=t,this}clear(){return this.setDots([]),this.wrapper.select(".dots").remove(),this}style(t){var{filter:n=(()=>!0),text:r,fontSize:o,fontFill:i}=t,s=e(t,["filter","text","fontSize","fontFill"]);const{wrapper:a}=this,{dotTextSize:u}=this.options,c=n instanceof Function?n:t=>{const[e,r]=Object.entries(n)[0];return t[e]===r},l=a.selectAll(".dot-circle").filter(c);return Object.keys(s).forEach((t=>l.attr(t,s[t]))),r&&a.selectAll(".dot-text").filter(c).text(r).attr("font-size",o||u).attr("fill",i||xt),this}muteStrings(t){const{wrapper:e,positions:n}=this,{strings:r,stroke:o,strokeWidth:i,width:s}=Object.assign(Object.assign({},De),t);return e.append("g").attr("class","muted-strings").attr("transform",`translate(${-s/2}, ${-s/2})`).selectAll("path").data(r).enter().append("path").attr("d",(t=>{const{y:e}=n[t-1][0];return[`M 0 ${e}`,`L ${s} ${e+s}`,`M ${s} ${e}`,`L 0 ${e+s}`].join(" ")})).attr("stroke",o).attr("stroke-width",i).attr("class","muted-string"),this}renderChord(t,e){const{positions:n,mutedStrings:r}=function(t){const e=[],n=[],r=t.indexOf("-")>-1?"-":"";return t.split(r).reverse().forEach(((t,r)=>{"0"!==t&&("x"!==t?e.push({fret:+t,string:r+1}):n.push(r+1))})),{positions:e,mutedStrings:n}}(t);return this.setDots(n),e&&this.renderBarres([].concat(e)),this.render(),this.muteStrings({strings:r}),this}renderScale({type:t,root:e,box:n}){n&&this.options.tuning.toString()!==Et.default.toString()&&console.warn("Selected scale system works for standard tuning. Wrong notes may be highlighted.");const r=this.system.getScale({type:t,root:e,box:n});return this.setDots(r).render()}renderBox({type:t,root:e,box:n}){this.options.tuning.toString()!==Et.default.toString()&&console.warn("Selected scale system works for standard tuning. Wrong notes may be highlighted.");const r=this.system.getScale({type:t,root:e,box:n}).filter((({inBox:t})=>t));return this.setDots(r).render()}on(t,e){const{svg:n,options:r,strings:o,frets:i,hoverDiv:s,dots:a}=this,u=n.select(".strings");return s||(this.hoverDiv=function({bottomPadding:t,showFretNumbers:e,fretNumbersHeight:n}){const r=document.createElement("div"),o=t+(e?n:0);return r.className="hoverDiv",r.style.position="absolute",r.style.top="0",r.style.bottom=`${o}px`,r.style.left="0",r.style.right="0",r}(r),n.node().parentNode.appendChild(this.hoverDiv)),this.handlers[t]?this.hoverDiv.removeEventListener(t,this.handlers[t]):(this.handlers[t]=function(t,e,n,r){var o,i=!1,s=0;function a(){o&&clearTimeout(o)}function u(){for(var u=arguments.length,c=new Array(u),l=0;l<u;l++)c[l]=arguments[l];var m=this,d=Date.now()-s;function h(){s=Date.now(),n.apply(m,c)}function f(){o=void 0}i||(r&&!o&&h(),a(),void 0===r&&d>t?h():!0!==e&&(o=setTimeout(r?f:h,void 0===r?t-d:t)))}return"boolean"!=typeof e&&(r=n,n=e,e=void 0),u.cancel=function(){a(),i=!0},u}(50,(t=>e((({event:t,stringsGroup:e,leftPadding:n,nutWidth:r,strings:o,frets:i,dots:s})=>{const{width:a,height:u}=e.node().getBoundingClientRect(),c=t.target.getBoundingClientRect(),l=t.clientX-c.left,m=t.clientY-c.top;let d=0;const h=u/(o.length-1);for(let t=0;t<o.length;t++)if(m<h*(t+1)){d=t;break}let f=-1;const p=Math.max(0,l-n)/a*100;for(let t=0;t<i.length;t++){if(p<i[t]){f=t;break}f=t}return l<n+r&&(f=0),s.find((({fret:t,string:e})=>t===f&&e===d+1))||{string:d+1,fret:f}})(Object.assign({event:t,stringsGroup:u,strings:o,frets:i,dots:a},r))))),this.hoverDiv.addEventListener(t,this.handlers[t])),this}removeEventListeners(){const{hoverDiv:t,handlers:e}=this;return t?(Object.entries(e).map((([e,n])=>t.removeEventListener(e,n))),this):this}renderBarres(t){const{wrapper:e,strings:n,options:r,positions:o}=this,i=t.map((({fret:t,stringFrom:e,stringTo:r})=>({fret:t,stringFrom:e?Math.min(e,n.length):n.length,stringTo:r?Math.max(r,1):1}))),{dotSize:s,barresColor:a}=r,u=this.getDotOffset(),c=.8*s;e.append("g").attr("class","barres").attr("transform",`translate(-${.5*c}, 0)`).selectAll("rect").data(i).enter().append("rect").attr("y",(({fret:t,stringTo:e})=>o[e-1][t-u].y-.75*s)).attr("x",(({fret:t,stringFrom:e})=>`${o[e-1][t-u].x}%`)).attr("rx",7.5).attr("width",c).attr("height",(({stringFrom:t,stringTo:e})=>n[t-1]-n[e-1]+1.5*s)).attr("fill",a)}baseRender(t){if(this.baseRendered)return;const{wrapper:e,frets:n,strings:r}=this,{height:o,font:i,nutColor:s,nutWidth:a,stringColor:u,stringWidth:c,fretColor:l,fretWidth:m,middleFretWidth:d,middleFretColor:h,showFretNumbers:f,fretNumbersMargin:p,fretNumbersColor:P,topPadding:g}=this.options,{totalWidth:M}=Mt(this.options);e.append("g").attr("class","strings").selectAll("line").data(r).enter().append("line").attr("x1",0).attr("y1",(t=>t)).attr("x2","100%").attr("y2",(t=>t)).attr("stroke",u).attr("stroke-width",((t,e)=>ft({stringWidth:c,stringIndex:e}))),e.append("g").attr("class","frets").selectAll("line").data(n).enter().append("line").attr("x1",(t=>`${t}%`)).attr("y1",1).attr("x2",(t=>`${t}%`)).attr("y2",o-1).attr("stroke",((t,e)=>{switch(e){case 0:return s;case 12:return h;default:return l}})).attr("stroke-width",((t,e)=>{switch(e){case 0:return a;case 12:return d;default:return m}})),f&&e.append("g").attr("class","fret-numbers").attr("font-family",i).attr("transform",`translate(0 ${p+g+r[r.length-1]})`).selectAll("text").data(n.slice(1)).enter().append("text").attr("text-anchor","middle").attr("x",((t,e)=>M/100*(t-(t-n[e])/2))).attr("fill",((t,e)=>11===e?h:P)).text(((e,n)=>`${n+1+t}`)),this.baseRendered=!0}getDotOffset(){const{dots:t}=this,{crop:e,fretLeftPadding:n}=this.options;return e?Math.max(0,Math.min(...t.map((({fret:t})=>t)))-1-n):0}},t.FretboardSystem=$e,t.GUITAR_TUNINGS=Et,t.disableDots=function({box:t=[],from:e={string:6,fret:0},to:n={string:1,fret:100}}={}){return Re({box:t,from:e,to:n,action:t=>Object.assign({disabled:!0},t)})},t.disableStrings=function({box:t=[],strings:n=[]}){return t.map((t=>{var{string:r}=t,o=e(t,["string"]);return Object.assign({string:r,disabled:n.indexOf(r)>-1},o)}))},t.sliceBox=function({box:t=[],from:e={string:6,fret:0},to:n={string:1,fret:100}}={}){const r=t.slice().sort(((t,e)=>t.string>e.string?-1:t.fret>e.fret?1:-1));function o(t){return r.findIndex((({string:e,fret:n})=>e===t.string&&n===t.fret))}let i=o(e);-1===i&&(i=0);let s=o(n);return-1===s&&(s=r.length),r.slice(i,s)},t.tetrachord=function({root:e,type:n,layout:r,string:o,fret:i}={root:"E",type:t.TetrachordTypes.Major,layout:t.TetrachordLayouts.Linear,string:6,fret:0}){const s=ke[n],a=[{string:o,fret:i,note:e}];let u=0,c=e;if(r===t.TetrachordLayouts.Linear)return s.forEach((t=>{const{semitones:e}=ee(t);c=te(c,t),u+=e,a.push({string:o,fret:i+u,note:c})})),a;if(1===o)throw new Error("Cannot split a tetrachord over two strings if starting on the first one");let l=o;const m=(()=>{switch(r){case t.TetrachordLayouts.ThreePlusOne:return 2;case t.TetrachordLayouts.TwoPlusTwo:return 1;case t.TetrachordLayouts.OnePlusThree:return 0}})();return s.forEach(((t,e)=>{const{semitones:n}=ee(t);c=te(c,t),e===m&&(l-=1,u=2===l?u-4:u-5),u+=n;const r=i+u;if(r<0)throw new Error("Cannot use this layout from this starting fret");a.push({string:l,fret:r,note:c})})),a},Object.defineProperty(t,"__esModule",{value:!0})}(e)},786:(t,e,n)=>{"use strict";n.r(e)},985:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.renderChord=e.instrumentToChordSystem=void 0;var r={chords:[{root:"C",pattern:"xR35R3",color:"#e76f51"},{root:"A",pattern:"xR5R35",color:"#6a994e"},{root:"G",pattern:"xx5R5R",color:"#8338ec"},{root:"E",pattern:"R5R35R",color:"#ffbd00"},{root:"D",pattern:"xxR5R3",color:"#00bbf9"}],instrument:n(845).guitar};e.instrumentToChordSystem=new Map([r].map((function(t){return[t.instrument,t]}))),e.renderChord=function(t,e,n,r){var o=r.getScale({root:t,type:"major"}),i=Math.max.apply(Math,o.map((function(t){return t.string}))),s=e.pattern.split(""),a=function(t){return function(e){return e.string==i-t}},u=Math.max.apply(Math,s.map((function(n,r){var i,s;return"R"!=n?-1:null!==(s=null===(i=o.filter(a(r)).filter((function(n){return t==e.root||n.fret>0})).find((function(t){return t.interval.startsWith("1P")})))||void 0===i?void 0:i.fret)&&void 0!==s?s:-1})).filter((function(t){return t>0})));return s.map((function(t,e){var n,r;if("x"==t)return t;var i="R"==t?"1":t;return null!==(r=null===(n=o.filter(a(e)).filter((function(t){return t.fret>u-4})).find((function(t){return t.interval.startsWith(i)})))||void 0===n?void 0:n.fret)&&void 0!==r?r:"x"})).map((function(t){return t}))}},321:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.modeToElement=e.modes=e.scaleTypes=e.notes=e.range=void 0,e.range=function(t){return Array.from({length:t},(function(t,e){return e}))},e.notes=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"].filter((function(t){return!t.endsWith("#")})),e.scaleTypes=["Major","Minor"],e.modes=["scales","chords"],e.modeToElement=new Map(e.modes.map((function(t){return[t,document.getElementById(t+"-switch")]})))},340:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.$chordSystemControl=e.$scaleTypeControl=e.$rootNoteControl=e.$instrumentControl=e.$highlightTriads=void 0,e.$highlightTriads=document.getElementById("highlight-triads"),e.$instrumentControl=document.getElementById("instrument-select"),e.$rootNoteControl=document.getElementById("root-note"),e.$scaleTypeControl=document.getElementById("scale-type"),e.$chordSystemControl=document.getElementById("chord-system")},929:function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var o=n(16),i=n(845),s=n(321),a=n(340),u=n(985);n(786);var c={root:s.notes[0],highlightTriads:!1,instrument:i.instruments[0],tuning:i.instruments[0].tunings[0],mode:s.modes[0],scaleType:s.scaleTypes[0],chordType:null,fretboard:null,stringWidth:function(){return s.range(c.tuning.strings.length).map((function(t,e){return e>0?.5*t:.5})).map((function(t){return t>2?2:t}))}},l={configureFretboard:function(t){if(null!=c.chordType){var e=new o.FretboardSystem({tuning:c.tuning.strings,fretCount:16}),n=u.renderChord(c.root,c.chordType,c.scaleType,e).join("-");t.renderChord(n).style({text:function(t){return t.note},fontSize:10,fill:c.chordType.color})}else t.render()},configureLayout:function(){a.$highlightTriads.classList.add("is-hidden"),a.$chordSystemControl.classList.remove("is-hidden");var t=u.instrumentToChordSystem.get(c.instrument);if(null!=t){a.$chordSystemControl.innerHTML=t.chords.map((function(t){var e=t.root.toUpperCase();return'\n                <p class="control">\n                   <button id="'+e+'" class="chord button is-small is-outlined is-primary">'+e+"</button>\n                </p>\n                "})).join("");for(var e=Array.from(a.$chordSystemControl.getElementsByClassName("chord")).filter((function(t){return null!=t})),n=function(n){n.addEventListener("click",(function(r){var o=t.chords.find((function(t){return t.root==n.id}));e.forEach((function(t){t.classList.remove("is-active"),t.classList.remove("is-focused")})),n.classList.add("is-active"),n.classList.add("is-focused"),p({chordType:o})}))},r=0,o=e;r<o.length;r++)n(o[r])}else a.$chordSystemControl.innerHTML=""}},m={configureFretboard:function(t){if(t.renderScale({root:c.root,type:c.scaleType.toLowerCase()}).style({fontSize:10}),c.highlightTriads){var e=new Set(["1P","3M","3m","5P"]);t.style({filter:{interval:"1P"},text:function(t){return t.interval},fill:"#e76f51"}).style({filter:{interval:"3"+("Major"==c.scaleType?"M":"m")},text:function(t){return t.interval},fill:"#F29727"}).style({filter:{interval:"5P"},text:function(t){return t.interval},fill:"#D89D6A"}).style({filter:function(t){var n=t.interval;return!e.has(n)},opacity:.5})}else t.style({text:function(t){return t.note}})},configureLayout:function(){a.$highlightTriads.classList.remove("is-hidden"),a.$chordSystemControl.classList.add("is-hidden")}},d=function(t){switch(t){case"chords":return l;case"scales":return m;default:return null}};function h(t){var e,n="is-focused",o="is-active";c=r(r({},c),t);for(var i=0,a=s.modes;i<a.length;i++){var l=a[i],m=s.modeToElement.get(l);m.classList.remove(n),m.classList.remove(o)}s.modeToElement.get("chords").disabled=null==u.instrumentToChordSystem.get(c.instrument),"chords"==c.mode&&null==u.instrumentToChordSystem.get(c.instrument)&&(c.mode="scales");var h=s.modeToElement.get(c.mode);h.classList.add(n),h.classList.add(o),null===(e=d(c.mode))||void 0===e||e.configureLayout(),p({})}function f(t){c=r(r({},c),t);var e=document.getElementById("tuning-select"),n=e.cloneNode(!0);e.parentNode.replaceChild(n,e),(e=n).innerHTML=c.instrument.tunings.map((function(t){var e=t.title;return'\n            <option value="'+e+'" '+(t===c.tuning?"selected":"")+">"+e+"</option>\n            "})).join(""),e.disabled=1==c.instrument.tunings.length,e.addEventListener("change",(function(t){var e=t.target.value;p({tuning:c.instrument.tunings.find((function(t){return t.title===e}))})})),p({})}function p(t){var e;c=r(r({},c),t),document.getElementById("fretboard").innerHTML="",c.fretboard=new o.Fretboard({el:"#fretboard",dotFill:"white",fretCount:16,tuning:c.tuning.strings,stringCount:c.tuning.strings.length,font:"Nunito",middleFretColor:"#666",stringWidth:c.stringWidth()}),null===(e=d(c.mode))||void 0===e||e.configureFretboard(c.fretboard)}s.modeToElement.forEach((function(t,e){t.addEventListener("click",(function(t){h({mode:e})}))})),a.$highlightTriads.addEventListener("change",(function(t){p({highlightTriads:t.target.checked})})),a.$instrumentControl.innerHTML=i.instruments.map((function(t){var e=t.title.toLowerCase();return'\n        <option value="'+e+'" '+(c.instrument===t?"selected":"")+">"+e+"</option>\n        "})).join(""),a.$instrumentControl.addEventListener("change",(function(t){var e=t.target.value,n=i.instruments.find((function(t){return t.title.toLowerCase()===e}));h({chordType:null,instrument:n}),f({instrument:n,tuning:n.tunings[0]})})),a.$rootNoteControl.innerHTML=s.notes.map((function(t){return"\n        <option value='"+t+"' "+(t==c.root?"selected":"")+">"+t+"</option>\n        "})).join(""),a.$rootNoteControl.addEventListener("change",(function(t){p({root:t.target.value})})),a.$scaleTypeControl.innerHTML=s.scaleTypes.map((function(t){return"\n        <option value='"+t+"' "+(t==c.scaleType?"selected":"")+">"+t+"</option>\n        "})).join(""),a.$scaleTypeControl.addEventListener("change",(function(t){p({scaleType:t.target.value})})),h({}),f({})},845:function(t,e,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var i=arguments[e],s=0,a=i.length;s<a;s++,o++)r[o]=i[s];return r};Object.defineProperty(e,"__esModule",{value:!0}),e.instruments=e.guitar=void 0;var o=n(16);e.guitar={title:"Guitar",tunings:[{title:"standard",strings:o.GUITAR_TUNINGS.default},{title:"drop D",strings:o.GUITAR_TUNINGS.dropD},{title:"drop C",strings:["C2","G2","C3","F3","A3","D4"]}]};var i={title:"Guitar 7s",tunings:[{title:"standard",strings:r(["B2"],o.GUITAR_TUNINGS.default)},{title:"drop A",strings:r(["A2"],o.GUITAR_TUNINGS.default)}]};e.instruments=[e.guitar,i,{title:"Bass",tunings:[{title:"standard",strings:["E1","A1","D2","G2"]}]},{title:"Ukulele",tunings:[{title:"standard",strings:["G4","C4","E4","A4"]}]}]}},e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{}};return t[r].call(o.exports,o,o.exports,n),o.exports}n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(929)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,